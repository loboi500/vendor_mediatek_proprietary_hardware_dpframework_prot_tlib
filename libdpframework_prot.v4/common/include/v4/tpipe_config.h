#ifndef __TPIPE_CONFIG_H__
#define __TPIPE_CONFIG_H__

#define TILE_PLATFORM_DRIVER /* to change define with platform unique */

#include "wpe_cal.h"

/* following define can be changed with rebuilding tpipe_driver.c */
#define LOG_REMARK_MUST_FILL_STR "<must>" /* can be changed */
#define LOG_REMARK_NOT_FOUND_STR "<no config>?" /* can be changed */
#define LOG_REMARK_HW_NOT_FOUND_STR "<no hw>?" /* can be changed */
#define LOG_REMARK_HW_REG_STR "<hw>" /* can be changed */
#define LOG_REMARK_DEBUG_STR "<debug>" /* can be changed */
#define LOG_REMARK_HW_DIFF_STR "<hw diff> " /* can be changed */
#define LOG_REMARK_HW_LOG_STR "<hw log>" /* can be changed */
#define TPIPE_DEBUG_DUMP_HEADER "[ISP][tpipe_dump]"
#define TPIPE_DEBUG_DUMP_START "start MT6593"
#define TPIPE_DEBUG_DUMP_END "end MT6593"
#define TPIPE_LOG_PARSE_FILE_NAME "tpipe_log_parse"
#define TPIPE_LOG_PARSE_FILE_EXT ".txt"
#define TPIPE_REG_DUMP_HEADER "0x"
#define TPIPE_DIP_BASE_HW     (0x15021000)
#define TPIPE_DIP_ADDR_START  (0x15021000)
#define TPIPE_DIP_ADDR_END    (0x1502CBD7)
#define TPIPE_DIP_DUMP_SKIP_NO ((unsigned int)(TPIPE_DIP_ADDR_START - TPIPE_DIP_BASE_HW)>>2)
#define TPIPE_MFB_BASE_HW   TPIPE_DIP_BASE_HW //(0x15010000)
#define TPIPE_MFB_ADDR_START  TPIPE_DIP_ADDR_START //(0x15010000)
#define TPIPE_MFB_ADDR_END    TPIPE_DIP_ADDR_END //(0x15010900)
#define TPIPE_MFB_DUMP_SKIP_NO ((unsigned int)(TPIPE_MFB_ADDR_START - TPIPE_MFB_BASE_HW)>>2)
#define TPIPE_MSS_BASE_HW   TPIPE_DIP_BASE_HW //(0x15010000)
#define TPIPE_MSS_ADDR_START  TPIPE_DIP_ADDR_START //(0x15010000)
#define TPIPE_MSS_ADDR_END    TPIPE_DIP_ADDR_END //(0x15010900)
#define TPIPE_MSS_DUMP_SKIP_NO ((unsigned int)(TPIPE_MSS_ADDR_START - TPIPE_MSS_BASE_HW)>>2)


#define MAX_READ_REG_NUM 4
#ifdef TILE_PLATFORM_DRIVER
#define MAX_TILE_TOT_NO (256)
#define MAX_ISP_DUMP_HEX_PER_TILE (256)
#define MAX_ISP_DUMP_HEX_PER_TILE_WPE (4)
#define MAX_ISP_DUMP_HEX_PER_TILE_WPE_S (24)
#define MAX_ISP_DUMP_HEX_PER_TILE_MFB (108)
#define MAX_ISP_DUMP_HEX_PER_TILE_MSS (40)
#else
#define MAX_TILE_TOT_NO (256)
#define MAX_ISP_DUMP_HEX_PER_TILE (256)
#define MAX_ISP_DUMP_HEX_PER_TILE_WPE (4)
#define MAX_ISP_DUMP_HEX_PER_TILE_WPE_S (24)
#define MAX_ISP_DUMP_HEX_PER_TILE_MFB (108)
#define MAX_ISP_DUMP_HEX_PER_TILE_MSS (40)
#endif

#define ISP_ERROR_MESSAGE_DATA(n, CMD) \
    CMD(n, ISP_TPIPE_MESSAGE_OK)\
    CMD(n, ISP_TPIPE_MESSAGE_FAIL)\
    /* final count, can not be changed */\
    CMD(n, ISP_TPIPE_MESSAGE_MAX_NO)\

#define ISP_TPIPE_ENUM_DECLARE(a, b) b,
#define ISP_TPIPE_ENUM_STRING(n, a) if ((a) == (n)) return #a;

#define GET_ISP_ERROR_NAME(n) \
    if (0 == (n)) return "ISP_TPIPE_MESSAGE_UNKNOWN";\
    ISP_ERROR_MESSAGE_DATA(n, ISP_TPIPE_ENUM_STRING)\
    return "";

/**
DIP hw CQ
*/
typedef enum
{
    ISP_DRV_DIP_CQ_THRE0 = 0,
    ISP_DRV_DIP_CQ_THRE1,
    ISP_DRV_DIP_CQ_THRE2,
    ISP_DRV_DIP_CQ_THRE3,
    ISP_DRV_DIP_CQ_THRE4,
    ISP_DRV_DIP_CQ_THRE5,
    ISP_DRV_DIP_CQ_THRE6,
    ISP_DRV_DIP_CQ_THRE7,
    ISP_DRV_DIP_CQ_THRE8,
    ISP_DRV_DIP_CQ_THRE9,
    ISP_DRV_DIP_CQ_THRE10,
    ISP_DRV_DIP_CQ_THRE11,  //vss usage
    ISP_DRV_DIP_CQ_NUM,    //baisc set, dip cqs
    ISP_DRV_DIP_CQ_NONE,
    ///////////////////
    /* we only need 12 CQ threads in this chip,
       so we move the follwoing enum thread behind ISP_DRV_DIP_CQ_NUM */
    ISP_DRV_DIP_CQ_THRE12,
    ISP_DRV_DIP_CQ_THRE13,
    ISP_DRV_DIP_CQ_THRE14,
    ISP_DRV_DIP_CQ_THRE15,  // For CQ_THREAD15, it does not connect to GCE for this chip.
    ISP_DRV_DIP_CQ_THRE16,  // For CQ_THREAD16, it does not connect to GCE for this chip.
    ISP_DRV_DIP_CQ_THRE17,  // For CQ_THREAD17, it does not connect to GCE for this chip.
    ISP_DRV_DIP_CQ_THRE18,  // For CQ_THREAD18, it does not connect to GCE for this chip.

}E_ISP_DIP_CQ;

//need equal to ISP_DRV_P2_CQ_ENUM
typedef enum
{
    ISP_TPIPE_P2_CQ1 = 0,
    ISP_TPIPE_P2_CQ2,
    ISP_TPIPE_P2_CQ3,
    ISP_TPIPE_P2_CQ_NUM
}ISP_TPIPE_P2_CQ_ENUM;

enum TILE_FUNC_DMA_ENUM
{
    TILE_FUNC_DMA_IMGI =  (0),
    TILE_FUNC_DMA_IMGBI = (1),
    TILE_FUNC_DMA_IMGCI = (2),
    TILE_FUNC_DMA_UFDI =  (3),
    TILE_FUNC_DMA_VIPI =  (4),
    TILE_FUNC_DMA_VIP2I = (5),
    TILE_FUNC_DMA_VIP3I = (6),
    TILE_FUNC_DMA_LCEI =  (7),
    TILE_FUNC_DMA_DMGI =  (8),
    TILE_FUNC_DMA_DEPI =  (9),
    TILE_FUNC_DMA_MFBO =  (10),
    TILE_FUNC_DMA_IMG2O = (11),
    TILE_FUNC_DMA_IMG2BO = (12),
    TILE_FUNC_DMA_FEO = (13),
    TILE_FUNC_DMA_IMG3O = (14),
    TILE_FUNC_DMA_IMG3BO = (15),
    TILE_FUNC_DMA_IMG3CO = (16),
    TILE_FUNC_DMA_MSF_BASEIC = (17),
    TILE_FUNC_DMA_NUM ,
};

/* error enum */
typedef enum ISP_TPIPE_MESSAGE_ENUM
{
    ISP_TPIPE_MESSAGE_UNKNOWN=0,
    ISP_ERROR_MESSAGE_DATA(,ISP_TPIPE_ENUM_DECLARE)
}ISP_TPIPE_MESSAGE_ENUM;

/* tpipe_irq_mode */
typedef enum TPIPE_IRQ_MODE_ENUM
{
    TPIPE_IRQ_FRAME_STOP=0,
    TPIPE_IRQ_LINE_END,
    TPIPE_IRQ_PER_TPIPE,
    TPIPE_IRQ_MODE_MAX_NO
}TPIPE_IRQ_MODE_ENUM;

/* f: reg_map_struct name*/
/* g: must and enable/disble*/
/* h: variable offset in isp_reg*/
/* i: variable mask in isp_reg*/
/* j: variable lsb in isp_reg*/
/* k: variable name in isp_reg*/
/* l: variable name in isp_reg*/
#define HW_DIP_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump DIP registers - start, replaced with auto-code gen */\
    CMD(a, b, c, d, e, top.pixel_id, true, 0x00002058, 0x15022058, 0x00000003, 0, DIPCTL_D1A_DIPCTL_MISC_SEL, DIPCTL_PIX_ID)\
    CMD(a, b, c, d, e, top.cam_in_fmt, true, 0x00002050, 0x15022050, 0x0000001F, 0, DIPCTL_D1A_DIPCTL_FMT_SEL1, DIPCTL_IMGI_D1_FMT)\
    CMD(a, b, c, d, e, top.ctl_extension_en, true, 0x00002064, 0x15022064, 0x00000004, 2, DIPCTL_D1A_DIPCTL_TDR_SEL, DIPCTL_TDR_CTL_EXT_EN)\
    CMD(a, b, c, d, e, top.fg_mode, true, 0x00002058, 0x15022058, 0x00000004, 2, DIPCTL_D1A_DIPCTL_MISC_SEL, DIPCTL_FG_MODE)\
    CMD(a, b, c, d, e, top.pakg_fg_out, true, 0x00002058, 0x15022058, 0x00004000, 14, DIPCTL_D1A_DIPCTL_MISC_SEL, DIPCTL_PAKG_D1_FG_OUT)\
    CMD(a, b, c, d, e, top.ufo_imgi_en, true, 0x0000101C, 0x1502101C, 0x20000000, 29, DIPDMATOP_D1A_DIPDMATOP_SPECIAL_FUN_EN, DIPDMATOP_UFO_IMGI_D1_EN)\
    CMD(a, b, c, d, e, top.ufo_imgbi_en, true, 0x0000101C, 0x1502101C, 0x00010000, 16, DIPDMATOP_D1A_DIPDMATOP_SPECIAL_FUN_EN, DIPDMATOP_UFO_IMGBI_D1_EN)\
    CMD(a, b, c, d, e, top.ufdi_fmt, true, 0x00002050, 0x15022050, 0x00000040, 6, DIPCTL_D1A_DIPCTL_FMT_SEL1, DIPCTL_UFDI_D1_FMT)\
    CMD(a, b, c, d, e, top.vipi_fmt, true, 0x00002050, 0x15022050, 0x0001F000, 12, DIPCTL_D1A_DIPCTL_FMT_SEL1, DIPCTL_VIPI_D1_FMT)\
    CMD(a, b, c, d, e, top.img3o_fmt, true, 0x00002054, 0x15022054, 0x0001F000, 12, DIPCTL_D1A_DIPCTL_FMT_SEL2, DIPCTL_IMG3O_D1_FMT)\
    CMD(a, b, c, d, e, top.crzo_fmt, true, 0x00002054, 0x15022054, 0x00000100, 8, DIPCTL_D1A_DIPCTL_FMT_SEL2, DIPCTL_CRZO_D1_FMT)\
    CMD(a, b, c, d, e, top.timgo_fmt, true, 0x00002054, 0x15022054, 0x0000001F, 0, DIPCTL_D1A_DIPCTL_FMT_SEL2, DIPCTL_TIMGO_D1_FMT)\
    CMD(a, b, c, d, e, top.imgi_en, true, 0x00002024, 0x15022024, 0x00000001, 0, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_IMGI_D1_EN)\
    CMD(a, b, c, d, e, top.imgbi_en, true, 0x00002024, 0x15022024, 0x00000002, 1, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_IMGBI_D1_EN)\
    CMD(a, b, c, d, e, top.imgci_en, true, 0x00002024, 0x15022024, 0x00000004, 2, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_IMGCI_D1_EN)\
    CMD(a, b, c, d, e, top.vipi_en, true, 0x00002028, 0x15022028, 0x00000001, 0, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_VIPI_D1_EN)\
    CMD(a, b, c, d, e, top.vipbi_en, true, 0x00002028, 0x15022028, 0x00000002, 1, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_VIPBI_D1_EN)\
    CMD(a, b, c, d, e, top.vipci_en, true, 0x00002028, 0x15022028, 0x00000004, 2, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_VIPCI_D1_EN)\
    CMD(a, b, c, d, e, top.ufdi_en, true, 0x00002024, 0x15022024, 0x00010000, 16, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_UFDI_D1_EN)\
    CMD(a, b, c, d, e, top.dmgi_en, true, 0x00002024, 0x15022024, 0x00020000, 17, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_DMGI_D1_EN)\
    CMD(a, b, c, d, e, top.depi_en, true, 0x00002024, 0x15022024, 0x00040000, 18, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_DEPI_D1_EN)\
    CMD(a, b, c, d, e, top.lcei_en, true, 0x00002024, 0x15022024, 0x00080000, 19, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_LCEI_D1_EN)\
    CMD(a, b, c, d, e, top.smt1i_en, true, 0x00002024, 0x15022024, 0x00000080, 7, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D1_EN)\
    CMD(a, b, c, d, e, top.smt2i_en, true, 0x00002024, 0x15022024, 0x00000100, 8, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D2_EN)\
    CMD(a, b, c, d, e, top.smt3i_en, true, 0x00002024, 0x15022024, 0x00000200, 9, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D3_EN)\
    CMD(a, b, c, d, e, top.smt4i_en, true, 0x00002024, 0x15022024, 0x00000400, 10, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D4_EN)\
    CMD(a, b, c, d, e, top.smt5i_en, true, 0x00002024, 0x15022024, 0x00800000, 23, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D5_EN)\
    CMD(a, b, c, d, e, top.smt6i_en, true, 0x00002024, 0x15022024, 0x01000000, 24, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTI_D6_EN)\
    CMD(a, b, c, d, e, top.smt1o_en, true, 0x00002024, 0x15022024, 0x00000800, 11, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D1_EN)\
    CMD(a, b, c, d, e, top.smt2o_en, true, 0x00002024, 0x15022024, 0x00001000, 12, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D2_EN)\
    CMD(a, b, c, d, e, top.smt3o_en, true, 0x00002024, 0x15022024, 0x00002000, 13, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D3_EN)\
    CMD(a, b, c, d, e, top.smt4o_en, true, 0x00002024, 0x15022024, 0x00004000, 14, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D4_EN)\
    CMD(a, b, c, d, e, top.smt5o_en, true, 0x00002024, 0x15022024, 0x02000000, 25, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D5_EN)\
    CMD(a, b, c, d, e, top.smt6o_en, true, 0x00002024, 0x15022024, 0x04000000, 26, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_SMTO_D6_EN)\
    CMD(a, b, c, d, e, top.smt1_en, true, 0x00002010, 0x15022010, 0x00000004, 2, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_SMT_D1_EN)\
    CMD(a, b, c, d, e, top.smt2_en, true, 0x00002018, 0x15022018, 0x00020000, 17, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_SMT_D2_EN)\
    CMD(a, b, c, d, e, top.smt3_en, true, 0x00002018, 0x15022018, 0x00400000, 22, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_SMT_D3_EN)\
    CMD(a, b, c, d, e, top.smt4_en, true, 0x00002020, 0x15022020, 0x00000020, 5, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_SMT_D4_EN)\
    CMD(a, b, c, d, e, top.smt5_en, true, 0x00002020, 0x15022020, 0x00000100, 8, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_SMT_D5_EN)\
    CMD(a, b, c, d, e, top.smt6_en, true, 0x00002020, 0x15022020, 0x00000800, 11, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_SMT_D6_EN)\
    CMD(a, b, c, d, e, top.unp_en, true, 0x00002010, 0x15022010, 0x00000001, 0, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_UNP_D1_EN)\
    CMD(a, b, c, d, e, top.unp2_en, true, 0x00002018, 0x15022018, 0x00040000, 18, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_UNP_D2_EN)\
    CMD(a, b, c, d, e, top.unp3_en, true, 0x00002018, 0x15022018, 0x00800000, 23, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_UNP_D3_EN)\
    CMD(a, b, c, d, e, top.unp4_en, true, 0x00002020, 0x15022020, 0x00000040, 6, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_UNP_D4_EN)\
    CMD(a, b, c, d, e, top.unp5_en, true, 0x00002020, 0x15022020, 0x00000200, 9, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_UNP_D5_EN)\
    CMD(a, b, c, d, e, top.unp6_en, true, 0x0000201C, 0x1502201C, 0x00002000, 13, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D6_EN)\
    CMD(a, b, c, d, e, top.unp7_en, true, 0x0000201C, 0x1502201C, 0x00004000, 14, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D7_EN)\
    CMD(a, b, c, d, e, top.unp8_en, true, 0x0000201C, 0x1502201C, 0x00008000, 15, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D8_EN)\
    CMD(a, b, c, d, e, top.unp9_en, true, 0x0000201C, 0x1502201C, 0x00080000, 19, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D9_EN)\
    CMD(a, b, c, d, e, top.unp10_en, true, 0x0000201C, 0x1502201C, 0x00100000, 20, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D10_EN)\
    CMD(a, b, c, d, e, top.unp11_en, true, 0x0000201C, 0x1502201C, 0x00200000, 21, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_UNP_D11_EN)\
    CMD(a, b, c, d, e, top.unp16_en, true, 0x00002020, 0x15022020, 0x00001000, 12, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_UNP_D16_EN)\
    CMD(a, b, c, d, e, top.ufd_en, true, 0x00002010, 0x15022010, 0x00000002, 1, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_UFD_D1_EN)\
    CMD(a, b, c, d, e, top.obc_en, true, 0x00002010, 0x15022010, 0x00000020, 5, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_OBC_D1_EN)\
    CMD(a, b, c, d, e, top.bpc_en, true, 0x00002010, 0x15022010, 0x00000010, 4, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_BPC_D1_EN)\
    CMD(a, b, c, d, e, top.zfus_en, true, 0x00002010, 0x15022010, 0x00000040, 6, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_ZFUS_D1_EN)\
    CMD(a, b, c, d, e, top.dgn_en, true, 0x00002010, 0x15022010, 0x00000080, 7, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_DGN_D1_EN)\
    CMD(a, b, c, d, e, top.lsc_en, true, 0x00002010, 0x15022010, 0x00000100, 8, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_LSC_D1_EN)\
    CMD(a, b, c, d, e, top.wb_en, true, 0x00002010, 0x15022010, 0x00000200, 9, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_WB_D1_EN)\
    CMD(a, b, c, d, e, top.hlr_en, true, 0x00002010, 0x15022010, 0x00000400, 10, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_HLR_D1_EN)\
    CMD(a, b, c, d, e, top.ltm_en, true, 0x00002010, 0x15022010, 0x00000800, 11, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_LTM_D1_EN)\
    CMD(a, b, c, d, e, top.dm_en, true, 0x00002010, 0x15022010, 0x00001000, 12, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_DM_D1_EN)\
    CMD(a, b, c, d, e, top.gdr_en, true, 0x00002010, 0x15022010, 0x00040000, 18, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_GDR_D1_EN)\
    CMD(a, b, c, d, e, top.align_en, true, 0x00002010, 0x15022010, 0x00080000, 19, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_ALIGN_D1_EN)\
    CMD(a, b, c, d, e, top.ldnr_en, true, 0x00002010, 0x15022010, 0x00002000, 13, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_LDNR_D1_EN)\
    CMD(a, b, c, d, e, top.flc_en, true, 0x00002014, 0x15022014, 0x00000001, 0, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_FLC_D1_EN)\
    CMD(a, b, c, d, e, top.ccm_en, true, 0x00002014, 0x15022014, 0x00000002, 1, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_CCM_D1_EN)\
    CMD(a, b, c, d, e, top.ccm2_en, true, 0x00002014, 0x15022014, 0x00000010, 4, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_CCM_D2_EN)\
    CMD(a, b, c, d, e, top.ggm_en, true, 0x00002014, 0x15022014, 0x00000004, 2, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_GGM_D1_EN)\
    CMD(a, b, c, d, e, top.ggm2_en, true, 0x00002014, 0x15022014, 0x00000020, 5, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_GGM_D2_EN)\
    CMD(a, b, c, d, e, top.wsync_en, true, 0x00002014, 0x15022014, 0x00000008, 3, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_WSYNC_D1_EN)\
    CMD(a, b, c, d, e, top.g2cx_en, true, 0x00002018, 0x15022018, 0x00000001, 0, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_G2CX_D1_EN)\
    CMD(a, b, c, d, e, top.c42_en, true, 0x00002018, 0x15022018, 0x00000002, 1, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_C42_D1_EN)\
    CMD(a, b, c, d, e, top.slk1_en, true, 0x00002010, 0x15022010, 0x00100000, 20, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_SLK_D1_EN)\
    CMD(a, b, c, d, e, top.slk2_en, true, 0x0000201C, 0x1502201C, 0x01000000, 24, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SLK_D2_EN)\
    CMD(a, b, c, d, e, top.slk3_en, true, 0x0000201C, 0x1502201C, 0x02000000, 25, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SLK_D3_EN)\
    CMD(a, b, c, d, e, top.slk4_en, true, 0x0000201C, 0x1502201C, 0x04000000, 26, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SLK_D4_EN)\
    CMD(a, b, c, d, e, top.slk5_en, true, 0x0000201C, 0x1502201C, 0x08000000, 27, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SLK_D5_EN)\
    CMD(a, b, c, d, e, top.slk6_en, true, 0x00002010, 0x15022010, 0x00200000, 21, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_SLK_D6_EN)\
    CMD(a, b, c, d, e, top.ndg_en, true, 0x00002018, 0x15022018, 0x00000010, 4, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_NDG_D1_EN)\
    CMD(a, b, c, d, e, top.ndg2_en, true, 0x00002018, 0x15022018, 0x00200000, 21, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_NDG_D2_EN)\
    CMD(a, b, c, d, e, top.ynr_en, true, 0x00002018, 0x15022018, 0x00000008, 3, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_YNR_D1_EN)\
    CMD(a, b, c, d, e, top.c24_en, true, 0x0000201C, 0x1502201C, 0x00040000, 18, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_C24_D1_EN)\
    CMD(a, b, c, d, e, top.c24d2_en, true, 0x0000201C, 0x1502201C, 0x00000040, 6, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_C24_D2_EN)\
    CMD(a, b, c, d, e, top.c24d3_en, true, 0x00002018, 0x15022018, 0x00000040, 6, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_C24_D3_EN)\
    CMD(a, b, c, d, e, top.c2g_en, true, 0x00002018, 0x15022018, 0x00000080, 7, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_C2G_D1_EN)\
    CMD(a, b, c, d, e, top.iggm_en, true, 0x00002018, 0x15022018, 0x00000100, 8, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_IGGM_D1_EN)\
    CMD(a, b, c, d, e, top.ccm3_en, true, 0x00002018, 0x15022018, 0x00000200, 9, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_CCM_D3_EN)\
    CMD(a, b, c, d, e, top.lce_en, true, 0x00002018, 0x15022018, 0x00000400, 10, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_LCE_D1_EN)\
    CMD(a, b, c, d, e, top.ggm3_en, true, 0x00002018, 0x15022018, 0x00000800, 11, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_GGM_D3_EN)\
    CMD(a, b, c, d, e, top.dce_en, true, 0x00002018, 0x15022018, 0x00001000, 12, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_DCE_D1_EN)\
    CMD(a, b, c, d, e, top.dces_en, true, 0x00002018, 0x15022018, 0x00002000, 13, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_DCES_D1_EN)\
    CMD(a, b, c, d, e, top.dceso_en, true, 0x00002024, 0x15022024, 0x00100000, 20, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_DCESO_D1_EN)\
    CMD(a, b, c, d, e, top.g2c_en, true, 0x00002018, 0x15022018, 0x00004000, 14, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_G2C_D1_EN)\
    CMD(a, b, c, d, e, top.c42d2_en, true, 0x00002018, 0x15022018, 0x00008000, 15, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_C42_D2_EN)\
    CMD(a, b, c, d, e, top.ee_en, true, 0x00002018, 0x15022018, 0x00010000, 16, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_EE_D1_EN)\
    CMD(a, b, c, d, e, top.aks_en, true, 0x00002020, 0x15022020, 0x00000001, 0, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_AKS_D1_EN)\
    CMD(a, b, c, d, e, top.cnr_en, true, 0x00002018, 0x15022018, 0x00100000, 20, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_CNR_D1_EN)\
    CMD(a, b, c, d, e, top.color_en, true, 0x00002018, 0x15022018, 0x02000000, 25, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_COLOR_D1_EN)\
    CMD(a, b, c, d, e, top.nr3d_en, true, 0x0000201C, 0x1502201C, 0x00000001, 0, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_NR3D_D1_EN)\
    CMD(a, b, c, d, e, top.rcp_en, true, 0x00002018, 0x15022018, 0x10000000, 28, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_CRP_D1_EN)\
    CMD(a, b, c, d, e, top.rcp2_en, true, 0x00002010, 0x15022010, 0x00004000, 14, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_CRP_D2_EN)\
    CMD(a, b, c, d, e, top.rcp3_en, true, 0x00002010, 0x15022010, 0x00010000, 16, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_CRP_D3_EN)\
    CMD(a, b, c, d, e, top.rcp4_en, true, 0x00002020, 0x15022020, 0x00004000, 14, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_CRP_D4_EN)\
    CMD(a, b, c, d, e, top.pak_en, true, 0x00002010, 0x15022010, 0x00008000, 15, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_PAK_D1_EN)\
    CMD(a, b, c, d, e, top.pak6_en, true, 0x0000201C, 0x1502201C, 0x00000008, 3, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PAK_D6_EN)\
    CMD(a, b, c, d, e, top.pak7_en, true, 0x0000201C, 0x1502201C, 0x00000010, 4, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PAK_D7_EN)\
    CMD(a, b, c, d, e, top.pak8_en, true, 0x0000201C, 0x1502201C, 0x00000020, 5, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PAK_D8_EN)\
    CMD(a, b, c, d, e, top.timgo_en, true, 0x00002024, 0x15022024, 0x00008000, 15, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_TIMGO_D1_EN)\
    CMD(a, b, c, d, e, top.img3o_en, true, 0x00002028, 0x15022028, 0x00000008, 3, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_IMG3O_D1_EN)\
    CMD(a, b, c, d, e, top.img3bo_en, true, 0x00002028, 0x15022028, 0x00000010, 4, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_IMG3BO_D1_EN)\
    CMD(a, b, c, d, e, top.img3co_en, true, 0x00002028, 0x15022028, 0x00000020, 5, DIPCTL_D1A_DIPCTL_DMA_EN2, DIPCTL_IMG3CO_D1_EN)\
    CMD(a, b, c, d, e, top.mcrp_en, true, 0x0000201C, 0x1502201C, 0x00000080, 7, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_MCRP_D1_EN)\
    CMD(a, b, c, d, e, top.mcrp2_en, true, 0x00002014, 0x15022014, 0x00000040, 6, DIPCTL_D1A_DIPCTL_RGB_EN2, DIPCTL_MCRP_D2_EN)\
    CMD(a, b, c, d, e, top.mix1_en, true, 0x00002018, 0x15022018, 0x00000020, 5, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_MIX_D1_EN)\
    CMD(a, b, c, d, e, top.mix2_en, true, 0x00002018, 0x15022018, 0x04000000, 26, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_MIX_D2_EN)\
    CMD(a, b, c, d, e, top.mix3_en, true, 0x00002018, 0x15022018, 0x00000004, 2, DIPCTL_D1A_DIPCTL_YUV_EN1, DIPCTL_MIX_D3_EN)\
    CMD(a, b, c, d, e, top.crz_en, true, 0x0000201C, 0x1502201C, 0x00000100, 8, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_CRZ_D1_EN)\
    CMD(a, b, c, d, e, top.crzo_en, true, 0x00002024, 0x15022024, 0x00000020, 5, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_CRZO_D1_EN)\
    CMD(a, b, c, d, e, top.crzbo_en, true, 0x00002024, 0x15022024, 0x00000040, 6, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_CRZBO_D1_EN)\
    CMD(a, b, c, d, e, top.srz1_en, true, 0x0000201C, 0x1502201C, 0x00000400, 10, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SRZ_D1_EN)\
    CMD(a, b, c, d, e, top.srz3_en, true, 0x0000201C, 0x1502201C, 0x00000800, 11, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SRZ_D3_EN)\
    CMD(a, b, c, d, e, top.srz4_en, true, 0x0000201C, 0x1502201C, 0x00001000, 12, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_SRZ_D4_EN)\
    CMD(a, b, c, d, e, top.dfe_en, true, 0x0000201C, 0x1502201C, 0x80000000, 31, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_DFE_D1_EN)\
    CMD(a, b, c, d, e, top.feo_en, true, 0x00002024, 0x15022024, 0x00200000, 21, DIPCTL_D1A_DIPCTL_DMA_EN1, DIPCTL_FEO_D1_EN)\
    CMD(a, b, c, d, e, top.c02_en, true, 0x0000201C, 0x1502201C, 0x00800000, 23, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_C02_D1_EN)\
    CMD(a, b, c, d, e, top.c02d2_en, true, 0x0000201C, 0x1502201C, 0x00020000, 17, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_C02_D2_EN)\
    CMD(a, b, c, d, e, top.crsp_en, true, 0x0000201C, 0x1502201C, 0x00000002, 1, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_CRSP_D1_EN)\
    CMD(a, b, c, d, e, top.plnr1_en, true, 0x0000201C, 0x1502201C, 0x00400000, 22, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PLNR_D1_EN)\
    CMD(a, b, c, d, e, top.plnr2_en, true, 0x0000201C, 0x1502201C, 0x00010000, 16, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PLNR_D2_EN)\
    CMD(a, b, c, d, e, top.plnw1_en, true, 0x0000201C, 0x1502201C, 0x00000004, 2, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PLNW_D1_EN)\
    CMD(a, b, c, d, e, top.plnw2_en, true, 0x0000201C, 0x1502201C, 0x00000200, 9, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_PLNW_D2_EN)\
    CMD(a, b, c, d, e, top.bs_en, true, 0x0000201C, 0x1502201C, 0x40000000, 30, DIPCTL_D1A_DIPCTL_YUV_EN2, DIPCTL_BS_D1_EN)\
    CMD(a, b, c, d, e, top.wif2_en, true, 0x00002010, 0x15022010, 0x00020000, 17, DIPCTL_D1A_DIPCTL_RGB_EN1, DIPCTL_WIF_D2_EN)\
    CMD(a, b, c, d, e, top.yufd_en, true, 0x00002020, 0x15022020, 0x00000002, 1, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_YUFD_D1_EN)\
    CMD(a, b, c, d, e, top.ufbcd_en, true, 0x00002020, 0x15022020, 0x00000010, 4, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_UFBCD_D1_EN)\
    CMD(a, b, c, d, e, top.ufbce_en, true, 0x00002020, 0x15022020, 0x00000008, 3, DIPCTL_D1A_DIPCTL_YUV_EN3, DIPCTL_UFBCE_D1_EN)\
    CMD(a, b, c, d, e, top.tdrsv_en, true, 0x000021AC, 0x150221AC, 0x00000001, 0, DIPCTL_D1A_DIPCTL_TDR_RESERVE, DIPCTL_TDR_RSV_D1_EN)\
    CMD(a, b, c, d, e, top.tdrsv2_en, true, 0x000021AC, 0x150221AC, 0x00000002, 1, DIPCTL_D1A_DIPCTL_TDR_RESERVE, DIPCTL_TDR_RSV_D2_EN)\
    CMD(a, b, c, d, e, top.tdrsvp_en, true, 0x000021AC, 0x150221AC, 0x00000004, 2, DIPCTL_D1A_DIPCTL_TDR_RESERVE, DIPCTL_TDR_RSVP_D1_EN)\
    CMD(a, b, c, d, e, top.tdrsvp2_en, true, 0x000021AC, 0x150221AC, 0x00000008, 3, DIPCTL_D1A_DIPCTL_TDR_RESERVE, DIPCTL_TDR_RSVP_D2_EN)\
    CMD(a, b, c, d, e, top.tdrsvpi_en, true, 0x000021AC, 0x150221AC, 0x00000010, 4, DIPCTL_D1A_DIPCTL_TDR_RESERVE, DIPCTL_TDR_RSVP_DMA_EN)\
    CMD(a, b, c, d, e, top.dl_mss_en, true, 0x00002058, 0x15022058, 0x00008000, 15, DIPCTL_D1A_DIPCTL_MISC_SEL, DIPCTL_DIP_DL_MSS_EN)\
    CMD(a, b, c, d, e, top.traw_sel, true, 0x00002040, 0x15022040, 0x00000003, 0, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_TRAW_SEL)\
    CMD(a, b, c, d, e, top.plnr_sel, true, 0x00002044, 0x15022044, 0x00004000, 14, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_PLNR_D1_SEL)\
    CMD(a, b, c, d, e, top.plnr2_sel, true, 0x00002044, 0x15022044, 0x00030000, 16, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_PLNR_D2_SEL)\
    CMD(a, b, c, d, e, top.flc_sel, true, 0x00002040, 0x15022040, 0x00000300, 8, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_FLC_D1_SEL)\
    CMD(a, b, c, d, e, top.dgn_sel, true, 0x00002040, 0x15022040, 0x01000000, 24, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_DGN_D1_SEL)\
    CMD(a, b, c, d, e, top.lsc_sel, true, 0x00002040, 0x15022040, 0x00400000, 22, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_LSC_D1_SEL)\
    CMD(a, b, c, d, e, top.crp2_sel, true, 0x00002040, 0x15022040, 0x00003000, 12, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_CRP_D2_SEL)\
    CMD(a, b, c, d, e, top.g2cx_sel, true, 0x00002040, 0x15022040, 0x00010000, 16, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_G2CX_D1_SEL)\
    CMD(a, b, c, d, e, top.ynr_sel, true, 0x00002040, 0x15022040, 0x000C0000, 18, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_YNR_D1_SEL)\
    CMD(a, b, c, d, e, top.timgo_sel, true, 0x00002040, 0x15022040, 0x00000070, 4, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_TIMGO_D1_SEL)\
    CMD(a, b, c, d, e, top.mix1_sel, true, 0x00002040, 0x15022040, 0x00100000, 20, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_MIX_D1_SEL)\
    CMD(a, b, c, d, e, top.c24d1_sel, true, 0x00002044, 0x15022044, 0x00000004, 2, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_C24_D1_SEL)\
    CMD(a, b, c, d, e, top.crz_sel, true, 0x00002044, 0x15022044, 0x00000030, 4, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_CRZ_D1_SEL)\
    CMD(a, b, c, d, e, top.fe_sel, true, 0x00002044, 0x15022044, 0x00000100, 8, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_FE_D1_SEL)\
    CMD(a, b, c, d, e, top.srz_sel, true, 0x00002044, 0x15022044, 0x00000400, 10, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_SRZ_D1_SEL)\
    CMD(a, b, c, d, e, top.feo_sel, true, 0x00002044, 0x15022044, 0x00001000, 12, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_FEO_D1_SEL)\
    CMD(a, b, c, d, e, top.nr3d_pre_i_sel, true, 0x00002044, 0x15022044, 0x00040000, 18, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_NR3D_D1_PRE_I_SEL)\
    CMD(a, b, c, d, e, top.mix3_w_sel, true, 0x00002044, 0x15022044, 0x00000001, 0, DIPCTL_D1A_DIPCTL_MUX_SEL2, DIPCTL_MIX_D3_W_SEL)\
    CMD(a, b, c, d, e, top.ynr_mfb_sel, true, 0x00002040, 0x15022040, 0x10000000, 28, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_YNR_D1_MFB_SEL)\
    CMD(a, b, c, d, e, smt1.smt1o_sel, REG_CHECK_EN(c, SMT1_EN), 0x00003080, 0x15023080, 0x00000080, 7, SMT_D1A_SMT_CTL, SMT_SMTO_SEL)\
    CMD(a, b, c, d, e, smt2.smt2o_sel, REG_CHECK_EN(c, SMT2_EN), 0x00007300, 0x15027300, 0x00000080, 7, SMT_D2A_SMT_CTL, SMT_SMTO_SEL)\
    CMD(a, b, c, d, e, smt3.smt3o_sel, REG_CHECK_EN(c, SMT3_EN), 0x00007580, 0x15027580, 0x00000080, 7, SMT_D3A_SMT_CTL, SMT_SMTO_SEL)\
    CMD(a, b, c, d, e, smt4.smt4o_sel, REG_CHECK_EN(c, SMT4_EN), 0x00005B00, 0x15025B00, 0x00000080, 7, SMT_D4A_SMT_CTL, SMT_SMTO_SEL)\
    CMD(a, b, c, d, e, smt5.smt5o_sel, REG_CHECK_EN(c, SMT5_EN), 0x00005BC0, 0x15025BC0, 0x00000080, 7, SMT_D5A_SMT_CTL, SMT_SMTO_SEL)\
    CMD(a, b, c, d, e, smt6.smt6o_sel, REG_CHECK_EN(c, SMT6_EN), 0x00005CC0, 0x15025CC0, 0x00000080, 7, SMT_D6A_SMT_CTL, SMT_SMTO_SEL)\
    CMD(a, b, c, d, e, top.smt5_sel, true, 0x00002040, 0x15022040, 0x04000000, 26, DIPCTL_D1A_DIPCTL_MUX_SEL1, DIPCTL_SMT_D5_SEL)\
    CMD(a, b, c, d, e, imgi.imgi_v_flip_en, REG_CMP_EQ(c, IMGI_EN, 1), 0x00001010, 0x15021010, 0x00000001, 0, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_IMGI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, imgi.imgi_stride, REG_CMP_EQ(c, IMGI_EN, 1), 0x00001214, 0x15021214, 0x0000FFFF, 0, IMGI_D1A_IMGI_STRIDE, IMGI_STRIDE)\
    CMD(a, b, c, d, e, imgbi.imgbi_stride, REG_CMP_EQ(c, IMGBI_EN, 1), 0x00001314, 0x15021314, 0x0000FFFF, 0, IMGBI_D1A_IMGBI_STRIDE, IMGBI_STRIDE)\
    CMD(a, b, c, d, e, imgci.imgci_v_flip_en, REG_CMP_EQ(c, LOG_IMGBI_EN, 1), 0x00001010, 0x15021010, 0x00000020, 5, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_IMGCI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, imgci.imgci_stride, REG_CMP_EQ(c, LOG_IMGBI_EN, 1), 0x00001344, 0x15021344, 0x0000FFFF, 0, IMGCI_D1A_IMGCI_STRIDE, IMGCI_STRIDE)\
    CMD(a, b, c, d, e, vipi.vipi_v_flip_en, REG_CMP_EQ(c, LOG_VIPI_EN, 1), 0x00001010, 0x15021010, 0x00100000, 20, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_VIPI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, vipi.vipi_stride, REG_CMP_EQ(c, VIPI_EN, 1), 0x00001814, 0x15021814, 0x0000FFFF, 0, VIPI_D1A_VIPI_STRIDE, VIPI_STRIDE)\
    CMD(a, b, c, d, e, vipbi.vipbi_v_flip_en, REG_CMP_EQ(c, LOG_VIPBI_EN, 1), 0x00001010, 0x15021010, 0x00200000, 21, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_VIPBI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, vipbi.vipbi_stride, REG_CMP_EQ(c, VIPBI_EN, 1), 0x00001844, 0x15021844, 0x0000FFFF, 0, VIPBI_D1A_VIPBI_STRIDE, VIPBI_STRIDE)\
    CMD(a, b, c, d, e, vipci.vipci_v_flip_en, REG_CMP_EQ(c, LOG_VIPCI_EN, 1), 0x00001010, 0x15021010, 0x00400000, 22, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_VIPCI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, vipci.vipci_stride, REG_CMP_EQ(c, VIPI_EN, 1), 0x00001874, 0x15021874, 0x0000FFFF, 0, VIPCI_D1A_VIPCI_STRIDE, VIPCI_STRIDE)\
    CMD(a, b, c, d, e, ufdi.ufdi_v_flip_en, REG_CMP_EQ(c, LOG_UFDI_EN, 1), 0x00001010, 0x15021010, 0x00000002, 1, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_UFDI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, ufdi.ufdi_stride, REG_CMP_EQ(c, LOG_UFDI_EN, 1), 0x00001244, 0x15021244, 0x0000FFFF, 0, UFDI_D1A_UFDI_STRIDE, UFDI_STRIDE)\
    CMD(a, b, c, d, e, dmgi.dmgi_v_flip_en, REG_CMP_EQ(c, LOG_DMGI_EN, 1), 0x00001010, 0x15021010, 0x00000200, 9, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_DMGI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, dmgi.dmgi_stride, REG_CMP_EQ(c, LOG_DMGI_EN, 1), 0x00001484, 0x15021484, 0x0000FFFF, 0, DMGI_D1A_DMGI_STRIDE, DMGI_STRIDE)\
    CMD(a, b, c, d, e, depi.depi_v_flip_en, REG_CMP_EQ(c, LOG_DEPI_EN, 1), 0x00001010, 0x15021010, 0x00000400, 10, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_DEPI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, depi.depi_stride, REG_CMP_EQ(c, LOG_DEPI_EN, 1), 0x000014B4, 0x150214B4, 0x0000FFFF, 0, DEPI_D1A_DEPI_STRIDE, DEPI_STRIDE)\
    CMD(a, b, c, d, e, lcei.lcei_v_flip_en, REG_CMP_EQ(c, LOG_LCEI_EN, 1), 0x00001010, 0x15021010, 0x00000800, 11, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_LCEI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, lcei.lcei_stride, REG_CMP_EQ(c, LOG_LCEI_EN, 1), 0x000014E4, 0x150214E4, 0x0000FFFF, 0, LCEI_D1A_LCEI_STRIDE, LCEI_STRIDE)\
    CMD(a, b, c, d, e, lce.lce_lc_tone, REG_CMP_EQ(c, LOG_LCE_EN, 1), 0x00006A18, 0x15026A18, 0x04000000, 26, LCE_D1A_LCE_GLOBAL, LCE_LC_TONE)\
    CMD(a, b, c, d, e, lce.lce_bc_mag_kubnx, REG_CMP_EQ(c, LOG_LCE_EN, 1), 0x00006A04, 0x15026A04, 0x7FFF0000, 16, LCE_D1A_LCE_ZR, LCE_BCMK_X)\
    CMD(a, b, c, d, e, lce.lce_bc_mag_kubny, REG_CMP_EQ(c, LOG_LCE_EN, 1), 0x00006A04, 0x15026A04, 0x00007FFF, 0, LCE_D1A_LCE_ZR, LCE_BCMK_Y)\
    CMD(a, b, c, d, e, unp2.yuv_bit, REG_CMP_EQ(c, LOG_SMT2_EN, 1), 0x00003004, 0x15023004, 0x00000030, 4, UNP_D1A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp2.yuv_dng, REG_CMP_EQ(c, LOG_SMT2_EN, 1), 0x00003004, 0x15023004, 0x00010000, 16, UNP_D1A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp3.yuv_bit, REG_CMP_EQ(c, LOG_SMT3_EN, 1), 0x000075C4, 0x150275C4, 0x00000030, 4, UNP_D3A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp3.yuv_dng, REG_CMP_EQ(c, LOG_SMT3_EN, 1), 0x000075C4, 0x150275C4, 0x00010000, 16, UNP_D3A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp4.yuv_bit, REG_CMP_EQ(c, LOG_SMT4_EN, 1), 0x00005A84, 0x15025A84, 0x00000030, 4, UNP_D4A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp4.yuv_dng, REG_CMP_EQ(c, LOG_SMT4_EN, 1), 0x00005A84, 0x15025A84, 0x00010000, 16, UNP_D4A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp5.yuv_bit, REG_CMP_EQ(c, LOG_SMT5_EN, 1), 0x00005B44, 0x15025B44, 0x00000030, 4, UNP_D5A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp5.yuv_dng, REG_CMP_EQ(c, LOG_SMT5_EN, 1), 0x00005B44, 0x15025B44, 0x00010000, 16, UNP_D5A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp6.yuv_bit, REG_CMP_EQ(c, LOG_UNP6_EN, 1), 0x00005004, 0x15025004, 0x00000030, 4, UNP_D6A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp6.yuv_dng, REG_CMP_EQ(c, LOG_UNP6_EN, 1), 0x00005004, 0x15025004, 0x00010000, 16, UNP_D6A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp7.yuv_bit, REG_CMP_EQ(c, LOG_UNP7_EN, 1), 0x00005044, 0x15025044, 0x00000030, 4, UNP_D7A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp7.yuv_dng, REG_CMP_EQ(c, LOG_UNP7_EN, 1), 0x00005044, 0x15025044, 0x00010000, 16, UNP_D7A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp8.yuv_bit, REG_CMP_EQ(c, LOG_UNP8_EN, 1), 0x00005084, 0x15025084, 0x00000030, 4, UNP_D8A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp8.yuv_dng, REG_CMP_EQ(c, LOG_UNP8_EN, 1), 0x00005084, 0x15025084, 0x00010000, 16, UNP_D8A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp9.yuv_bit, REG_CMP_EQ(c, LOG_UNP9_EN, 1), 0x00005944, 0x15025944, 0x00000030, 4, UNP_D9A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp9.yuv_dng, REG_CMP_EQ(c, LOG_UNP9_EN, 1), 0x00005944, 0x15025944, 0x00010000, 16, UNP_D9A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp10.yuv_bit, REG_CMP_EQ(c, LOG_UNP10_EN, 1), 0x00005984, 0x15025984, 0x00000030, 4, UNP_D10A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp10.yuv_dng, REG_CMP_EQ(c, LOG_UNP10_EN, 1), 0x00005984, 0x15025984, 0x00010000, 16, UNP_D10A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp11.yuv_bit, REG_CMP_EQ(c, LOG_UNP11_EN, 1), 0x000059C4, 0x150259C4, 0x00000030, 4, UNP_D11A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp11.yuv_dng, REG_CMP_EQ(c, LOG_UNP11_EN, 1), 0x000059C4, 0x150259C4, 0x00010000, 16, UNP_D11A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, unp16.yuv_bit, REG_CMP_EQ(c, LOG_SMT6_EN, 1), 0x00005C44, 0x15025C44, 0x00000030, 4, UNP_D16A_UNP_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, unp16.yuv_dng, REG_CMP_EQ(c, LOG_SMT6_EN, 1), 0x00005C44, 0x15025C44, 0x00010000, 16, UNP_D16A_UNP_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, pak2.yuv_bit, REG_CMP_EQ(c, LOG_SMT2_EN, 1), 0x00007380, 0x15027380, 0x00000300, 8, PAK_D2A_PAK_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, pak2.yuv_dng, REG_CMP_EQ(c, LOG_SMT2_EN, 1), 0x00007380, 0x15027380, 0x00001000, 12, PAK_D2A_PAK_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, pak3.yuv_bit, REG_CMP_EQ(c, LOG_SMT3_EN, 1), 0x00007600, 0x15027600, 0x00000300, 8, PAK_D3A_PAK_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, pak3.yuv_dng, REG_CMP_EQ(c, LOG_SMT3_EN, 1), 0x00007600, 0x15027600, 0x00001000, 12, PAK_D3A_PAK_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, pak4.yuv_bit, REG_CMP_EQ(c, LOG_SMT4_EN, 1), 0x00005AC0, 0x15025AC0, 0x00000300, 8, PAK_D4A_PAK_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, pak4.yuv_dng, REG_CMP_EQ(c, LOG_SMT4_EN, 1), 0x00005AC0, 0x15025AC0, 0x00001000, 12, PAK_D4A_PAK_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, pak5.yuv_bit, REG_CMP_EQ(c, LOG_SMT5_EN, 1), 0x00005B80, 0x15025B80, 0x00000300, 8, PAK_D5A_PAK_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, pak5.yuv_dng, REG_CMP_EQ(c, LOG_SMT5_EN, 1), 0x00005B80, 0x15025B80, 0x00001000, 12, PAK_D5A_PAK_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, pak6.yuv_bit, REG_CMP_EQ(c, LOG_PAK6_EN, 1), 0x00008980, 0x15028980, 0x00000300, 8, PAK_D6A_PAK_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, pak6.yuv_dng, REG_CMP_EQ(c, LOG_PAK6_EN, 1), 0x00008980, 0x15028980, 0x00001000, 12, PAK_D6A_PAK_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, pak7.yuv_bit, REG_CMP_EQ(c, LOG_PAK7_EN, 1), 0x000089C0, 0x150289C0, 0x00000300, 8, PAK_D7A_PAK_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, pak7.yuv_dng, REG_CMP_EQ(c, LOG_PAK7_EN, 1), 0x000089C0, 0x150289C0, 0x00001000, 12, PAK_D7A_PAK_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, pak8.yuv_bit, REG_CMP_EQ(c, LOG_PAK8_EN, 1), 0x00008A00, 0x15028A00, 0x00000300, 8, PAK_D8A_PAK_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, pak8.yuv_dng, REG_CMP_EQ(c, LOG_PAK8_EN, 1), 0x00008A00, 0x15028A00, 0x00001000, 12, PAK_D8A_PAK_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, pak16.yuv_bit, REG_CMP_EQ(c, LOG_SMT6_EN, 1), 0x00005C80, 0x15025C80, 0x00000300, 8, PAK_D16A_PAK_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, pak16.yuv_dng, REG_CMP_EQ(c, LOG_SMT6_EN, 1), 0x00005C80, 0x15025C80, 0x00001000, 12, PAK_D16A_PAK_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, dm.dm_byp, REG_CMP_EQ(c, LOG_DM_EN, 1), 0x000035C0, 0x150235C0, 0x40000000, 30, DM_D1A_DM_INTP_CRS, DM_BYP)\
    CMD(a, b, c, d, e, ynr.eny, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00005700, 0x15025700, 0x00000002, 1, YNR_D1A_YNR_CON1, YNR_ENY)\
    CMD(a, b, c, d, e, ynr.enc, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00005700, 0x15025700, 0x00000001, 0, YNR_D1A_YNR_CON1, YNR_ENC)\
    CMD(a, b, c, d, e, ynr.video_mode, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00005700, 0x15025700, 0x02000000, 25, YNR_D1A_YNR_CON1, YNR_VIDEO_MODE)\
    CMD(a, b, c, d, e, ynr.lce_link, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00005700, 0x15025700, 0x00100000, 20, YNR_D1A_YNR_CON1, YNR_LCE_LINK)\
    CMD(a, b, c, d, e, ynr.skin_link, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x000057FC, 0x150257FC, 0x00000001, 0, YNR_D1A_YNR_SKIN_CON, YNR_SKIN_LINK)\
    CMD(a, b, c, d, e, ynr.msf_link, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00005700, 0x15025700, 0x00400000, 22, YNR_D1A_YNR_CON1, YNR_MSF_LINK)\
    CMD(a, b, c, d, e, ee.ee_out_edge_sel, REG_CMP_EQ(c, LOG_YNR_EN, 1), 0x00007204, 0x15027204, 0x00000003, 0, EE_D1A_EE_TOP_CTRL, EE_OUT_EDGE_SEL)\
    CMD(a, b, c, d, e, cnr.bpc_en, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x000073C0, 0x150273C0, 0x00000002, 1, CNR_D1A_CNR_CNR_CON1, CNR_BPC_EN)\
    CMD(a, b, c, d, e, cnr.enc, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x000073C0, 0x150273C0, 0x00000001, 0, CNR_D1A_CNR_CNR_CON1, CNR_CNR_ENC)\
    CMD(a, b, c, d, e, cnr.video_mode, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x000073C0, 0x150273C0, 0x00000004, 2, CNR_D1A_CNR_CNR_CON1, CNR_VIDEO_MODE)\
    CMD(a, b, c, d, e, cnr.mode, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x000073C0, 0x150273C0, 0x00001000, 12, CNR_D1A_CNR_CNR_CON1, CNR_MODE)\
    CMD(a, b, c, d, e, cnr.scale_mode, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x000073C0, 0x150273C0, 0x00000030, 4, CNR_D1A_CNR_CNR_CON1, CNR_CNR_SCALE_MODE)\
    CMD(a, b, c, d, e, cnr.abf_en, REG_CMP_EQ(c, LOG_CNR_EN, 1), 0x00007480, 0x15027480, 0x00000001, 0, CNR_D1A_CNR_ABF_CON1, CNR_ABF_EN)\
    CMD(a, b, c, d, e, timgo.timgo_stride, REG_CMP_EQ(c, LOG_TIMGO_EN, 1), 0x00001374, 0x15021374, 0x0000FFFF, 0, TIMGO_D1A_TIMGO_STRIDE, TIMGO_STRIDE)\
    CMD(a, b, c, d, e, img3o.img3o_stride, REG_CMP_EQ(c, LOG_IMG3O_EN, 1), 0x000018A4, 0x150218A4, 0x0000FFFF, 0, IMG3O_D1A_IMG3O_STRIDE, IMG3O_STRIDE)\
    CMD(a, b, c, d, e, img3bo.img3bo_stride, REG_CMP_EQ(c, LOG_IMG3BO_EN, 1), 0x00001914, 0x15021914, 0x0000FFFF, 0, IMG3BO_D1A_IMG3BO_STRIDE, IMG3BO_STRIDE)\
    CMD(a, b, c, d, e, img3co.img3co_stride, REG_CMP_EQ(c, LOG_IMG3CO_EN, 1), 0x00001984, 0x15021984, 0x0000FFFF, 0, IMG3CO_D1A_IMG3CO_STRIDE, IMG3CO_STRIDE)\
    CMD(a, b, c, d, e, crzo.crzo_stride, REG_CMP_EQ(c, LOG_CRZO_EN, 1), 0x000016C4, 0x150216C4, 0x0000FFFF, 0, CRZO_D1A_CRZO_STRIDE, CRZO_STRIDE)\
    CMD(a, b, c, d, e, crzbo.crzbo_stride, REG_CMP_EQ(c, LOG_CRZBO_EN, 1), 0x00001734, 0x15021734, 0x0000FFFF, 0, CRZBO_D1A_CRZBO_STRIDE, CRZBO_STRIDE)\
    CMD(a, b, c, d, e, ufd.ufd_sel, true, 0x00003040, 0x15023040, 0x00000002, 1, UFD_D1A_UFD_CON, UFD_SEL)\
    CMD(a, b, c, d, e, yufd.yufd_code_mode, true, 0x00005A00, 0x15025A00, 0x00000001, 0, YUFD_D1A_YUFD_CON, YUFD_CODE_MODE)\
    CMD(a, b, c, d, e, slk1.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK1_EN, 1), 0x00003650, 0x15023650, 0x00003FFF, 0, SLK_D1A_SLK_RZ, SLK_HRZ_COMP)\
    CMD(a, b, c, d, e, slk1.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK1_EN, 1), 0x00003650, 0x15023650, 0x3FFF0000, 16, SLK_D1A_SLK_RZ, SLK_VRZ_COMP)\
    CMD(a, b, c, d, e, slk2.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK2_EN, 1), 0x00005250, 0x15025250, 0x00003FFF, 0, SLK_D2A_SLK_RZ, SLK_HRZ_COMP)\
    CMD(a, b, c, d, e, slk2.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK2_EN, 1), 0x00005250, 0x15025250, 0x3FFF0000, 16, SLK_D2A_SLK_RZ, SLK_VRZ_COMP)\
    CMD(a, b, c, d, e, slk3.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK3_EN, 1), 0x000074D0, 0x150274D0, 0x00003FFF, 0, SLK_D3A_SLK_RZ, SLK_HRZ_COMP)\
    CMD(a, b, c, d, e, slk3.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK3_EN, 1), 0x000074D0, 0x150274D0, 0x3FFF0000, 16, SLK_D3A_SLK_RZ, SLK_VRZ_COMP)\
    CMD(a, b, c, d, e, slk4.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK4_EN, 1), 0x000072D0, 0x150272D0, 0x00003FFF, 0, SLK_D4A_SLK_RZ, SLK_HRZ_COMP)\
    CMD(a, b, c, d, e, slk4.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK4_EN, 1), 0x000072D0, 0x150272D0, 0x3FFF0000, 16, SLK_D4A_SLK_RZ, SLK_VRZ_COMP)\
    CMD(a, b, c, d, e, slk5.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK5_EN, 1), 0x00008610, 0x15028610, 0x00003FFF, 0, SLK_D5A_SLK_RZ, SLK_HRZ_COMP)\
    CMD(a, b, c, d, e, slk5.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK5_EN, 1), 0x00008610, 0x15028610, 0x3FFF0000, 16, SLK_D5A_SLK_RZ, SLK_VRZ_COMP)\
    CMD(a, b, c, d, e, slk6.slk_hrz_comp, REG_CMP_EQ(c, LOG_SLK6_EN, 1), 0x00003750, 0x15023750, 0x00003FFF, 0, SLK_D6A_SLK_RZ, SLK_HRZ_COMP)\
    CMD(a, b, c, d, e, slk6.slk_vrz_comp, REG_CMP_EQ(c, LOG_SLK6_EN, 1), 0x00003750, 0x15023750, 0x3FFF0000, 16, SLK_D6A_SLK_RZ, SLK_VRZ_COMP)\
    CMD(a, b, c, d, e, lsc.extend_coef_mode, REG_CMP_EQ(c, LOG_LSC_EN, 1), 0x00003340, 0x15023340, 0x00400000, 22, LSC_D1A_LSC_CTL1, LSC_EXTEND_COEF_MODE)\
    CMD(a, b, c, d, e, lsc.sdblk_width, REG_CMP_EQ(c, LOG_LSC_EN, 1), 0x00003344, 0x15023344, 0x00001FFF, 0, LSC_D1A_LSC_CTL2, LSC_SDBLK_WIDTH)\
    CMD(a, b, c, d, e, lsc.sdblk_height, REG_CMP_EQ(c, LOG_LSC_EN, 1), 0x00003348, 0x15023348, 0x00001FFF, 0, LSC_D1A_LSC_CTL3, LSC_SDBLK_HEIGHT)\
    CMD(a, b, c, d, e, ltm.blk_x_num, REG_CMP_EQ(c, LOG_LTM_EN, 1), 0x00003444, 0x15023444, 0x0000001F, 0, LTM_D1A_LTM_BLK_NUM, LTM_BLK_X_NUM)\
    CMD(a, b, c, d, e, ltm.blk_y_num, REG_CMP_EQ(c, LOG_LTM_EN, 1), 0x00003444, 0x15023444, 0x00001F00, 8, LTM_D1A_LTM_BLK_NUM, LTM_BLK_Y_NUM)\
    CMD(a, b, c, d, e, ltm.blk_width, REG_CMP_EQ(c, LOG_LTM_EN, 1), 0x00003448, 0x15023448, 0x00001FFF, 0, LTM_D1A_LTM_BLK_SZ, LTM_BLK_WIDTH)\
    CMD(a, b, c, d, e, ltm.blk_height, REG_CMP_EQ(c, LOG_LTM_EN, 1), 0x00003448, 0x15023448, 0x1FFF0000, 16, LTM_D1A_LTM_BLK_SZ, LTM_BLK_HEIGHT)\
    CMD(a, b, c, d, e, g2cx.g2cx_shade_en, REG_CMP_EQ(c, LOG_G2CX_EN, 1), 0x00005198, 0x15025198, 0x20000000, 29, G2CX_D1A_G2CX_SHADE_CON_1, G2CX_SHADE_EN)\
    CMD(a, b, c, d, e, dceso.dceso_xsize, REG_CMP_EQ(c, LOG_DCESO_EN, 1), 0x0000150C, 0x1502150C, 0x0000FFFF, 0, DCESO_D1A_DCESO_XSIZE, DCESO_XSIZE)\
    CMD(a, b, c, d, e, dceso.dceso_ysize, REG_CMP_EQ(c, LOG_DCESO_EN, 1), 0x00001510, 0x15021510, 0x0000FFFF, 0, DCESO_D1A_DCESO_YSIZE, DCESO_YSIZE)\
    CMD(a, b, c, d, e, srz1.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ1_EN, 1), 0x000087CC, 0x150287CC, 0x0007FFFF, 0, SRZ_D1A_SRZ_HORI_STEP, SRZ_HORI_STEP)\
    CMD(a, b, c, d, e, srz1.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ1_EN, 1), 0x000087D0, 0x150287D0, 0x0007FFFF, 0, SRZ_D1A_SRZ_VERT_STEP, SRZ_VERT_STEP)\
    CMD(a, b, c, d, e, srz3.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ3_EN, 1), 0x0000754C, 0x1502754C, 0x0007FFFF, 0, SRZ_D3A_SRZ_HORI_STEP, SRZ_HORI_STEP)\
    CMD(a, b, c, d, e, srz3.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ3_EN, 1), 0x00007550, 0x15027550, 0x0007FFFF, 0, SRZ_D3A_SRZ_VERT_STEP, SRZ_VERT_STEP)\
    CMD(a, b, c, d, e, srz4.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ4_EN, 1), 0x000052CC, 0x150252CC, 0x0007FFFF, 0, SRZ_D4A_SRZ_HORI_STEP, SRZ_HORI_STEP)\
    CMD(a, b, c, d, e, srz4.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ4_EN, 1), 0x000052D0, 0x150252D0, 0x0007FFFF, 0, SRZ_D4A_SRZ_VERT_STEP, SRZ_VERT_STEP)\
    CMD(a, b, c, d, e, crz.crz_horizontal_luma_algorithm, REG_CMP_EQ(c, LOG_CRZ_EN, 1), 0x00008700, 0x15028700, 0x00000060, 5, CRZ_D1A_CRZ_CONTROL, CRZ_HORI_ALGO)\
    CMD(a, b, c, d, e, crz.crz_vertical_luma_algorithm, REG_CMP_EQ(c, LOG_CRZ_EN, 1), 0x00008700, 0x15028700, 0x00000180, 7, CRZ_D1A_CRZ_CONTROL, CRZ_VERT_ALGO)\
    CMD(a, b, c, d, e, crz.crz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_CRZ_EN, 1), 0x0000870C, 0x1502870C, 0x007FFFFF, 0, CRZ_D1A_CRZ_HORI_STEP, CRZ_HORI_STEP)\
    CMD(a, b, c, d, e, crz.crz_vertical_coeff_step, REG_CMP_EQ(c, LOG_CRZ_EN, 1), 0x00008710, 0x15028710, 0x007FFFFF, 0, CRZ_D1A_CRZ_VERT_STEP, CRZ_VERT_STEP)\
    CMD(a, b, c, d, e, dfe.dfe_mode, REG_CMP_EQ(c, LOG_DFE_EN, 1), 0x00008A40, 0x15028A40, 0x00000003, 0, DFE_D1A_DFE_FE_CTRL1, DFE_MODE)\
    CMD(a, b, c, d, e, feo.feo_stride, REG_CMP_EQ(c, LOG_FEO_EN, 1), 0x000017A4, 0x150217A4, 0x0000FFFF, 0, FEO_D1A_FEO_STRIDE, FEO_STRIDE)\
    CMD(a, b, c, d, e, nr3d.nr3d_snr_en, REG_CMP_EQ(c, LOG_NR3D_EN, 1), 0x000081FC, 0x150281FC, 0x80000000, 31, NR3D_D1A_NR3D_NR3D_SNR_CONTROL_1, NR3D_snr_en)\
    CMD(a, b, c, d, e, nr3d.nr3d_on_en, REG_CMP_EQ(c, LOG_NR3D_EN, 1), 0x0000800C, 0x1502800C, 0x00000010, 4, NR3D_D1A_NR3D_NR3D_ON_CON, NR3D_on_en)\
    CMD(a, b, c, d, e, crsp.crsp_ystep, REG_CMP_EQ(c, LOG_CRSP_EN, 1), 0x00008688, 0x15028688, 0x00070000, 16, CRSP_D1A_CRSP_STEP_OFST, CRSP_STEP_Y)\
    CMD(a, b, c, d, e, smt1i.smt1i_v_flip_en, REG_CMP_EQ(c, SMT1I_EN, 1), 0x00001010, 0x15021010, 0x00000004, 2, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_SMTI_D1_V_FLIP_EN)\
    CMD(a, b, c, d, e, smt2i.smt2i_v_flip_en, REG_CMP_EQ(c, SMT2I_EN, 1), 0x00001010, 0x15021010, 0x00002000, 13, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_SMTI_D2_V_FLIP_EN)\
    CMD(a, b, c, d, e, smt3i.smt3i_v_flip_en, REG_CMP_EQ(c, SMT3I_EN, 1), 0x00001010, 0x15021010, 0x00008000, 15, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_SMTI_D3_V_FLIP_EN)\
    CMD(a, b, c, d, e, smt4i.smt4i_v_flip_en, REG_CMP_EQ(c, SMT4I_EN, 1), 0x00001010, 0x15021010, 0x00000080, 7, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_SMTI_D4_V_FLIP_EN)\
    CMD(a, b, c, d, e, smt5i.smt5i_v_flip_en, REG_CMP_EQ(c, SMT5I_EN, 1), 0x00001010, 0x15021010, 0x04000000, 26, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_SMTI_D5_V_FLIP_EN)\
    CMD(a, b, c, d, e, smt6i.smt6i_v_flip_en, REG_CMP_EQ(c, SMT6I_EN, 1), 0x00001010, 0x15021010, 0x10000000, 28, DIPDMATOP_D1A_DIPDMATOP_VERTICAL_FLIP_EN, DIPDMATOP_SMTI_D6_V_FLIP_EN)\
    /* Dump DIP registers - end */\
    /* Manually insert more ISP registers below */\

#define HW_MFB_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump MFB registers - start, replaced with auto-code gen */\
    CMD(a, b, c, d, e, msf.slk_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00000002, 1, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_slk_en)\
    CMD(a, b, c, d, e, msf.rdma_baseiy_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000001, 0, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_baseiy_en)\
    CMD(a, b, c, d, e, msf.rdma_baseic_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000002, 1, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_baseic_en)\
    CMD(a, b, c, d, e, msf.rdma_refiy_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000004, 2, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_refiy_en)\
    CMD(a, b, c, d, e, msf.rdma_refic_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000008, 3, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_refic_en)\
    CMD(a, b, c, d, e, msf.rdma_dsiy_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000010, 4, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_dsiy_en)\
    CMD(a, b, c, d, e, msf.rdma_dsic_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000020, 5, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_dsic_en)\
    CMD(a, b, c, d, e, msf.rdma_idiy_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000040, 6, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_idiy_en)\
    CMD(a, b, c, d, e, msf.rdma_idic_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000080, 7, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_idic_en)\
    CMD(a, b, c, d, e, msf.rdma_wei_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000100, 8, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_wei_en)\
    CMD(a, b, c, d, e, msf.rdma_dswi_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000200, 9, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_dswi_en)\
    CMD(a, b, c, d, e, msf.rdma_confi_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00000400, 10, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_rdma_confi_en)\
    CMD(a, b, c, d, e, msf.lpf_baseiy_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00000100, 8, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_lpf_baseiy_en)\
    CMD(a, b, c, d, e, msf.lpf_baseic_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00000200, 9, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_lpf_baseic_en)\
    CMD(a, b, c, d, e, msf.lpf_refiy_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00000400, 10, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_lpf_refiy_en)\
    CMD(a, b, c, d, e, msf.lpf_refic_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00000800, 11, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_lpf_refic_en)\
    CMD(a, b, c, d, e, msf.yurz_dsi_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00001000, 12, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_yurz_dsi_en)\
    CMD(a, b, c, d, e, msf.curz_dsi_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00002000, 13, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_curz_dsi_en)\
    CMD(a, b, c, d, e, msf.yurz_idi_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00004000, 14, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_yurz_idi_en)\
    CMD(a, b, c, d, e, msf.curz_idi_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00008000, 15, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_curz_idi_en)\
    CMD(a, b, c, d, e, msf.yurz_dswi_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00010000, 16, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_yurz_dswi_en)\
    CMD(a, b, c, d, e, msf.yurz_confi_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00020000, 17, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_yurz_confi_en)\
    CMD(a, b, c, d, e, msf.crp_y_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00100000, 20, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_crp_y_en)\
    CMD(a, b, c, d, e, msf.crp_w_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00200000, 21, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_crp_w_en)\
    CMD(a, b, c, d, e, msf.crp_m_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00400000, 22, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_crp_m_en)\
    CMD(a, b, c, d, e, msf.crsp_en, REG_CMP_EQ(c, MSF_EN, 1), 0x000004A0, 0x158104A0, 0x00000001, 0, MFB_D1A_MFBTOP_ENG_EN, MFBTOP_csr_crsp_en)\
    CMD(a, b, c, d, e, msf.wdma_fsoy_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00010000, 16, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_wdma_fsoy_en)\
    CMD(a, b, c, d, e, msf.wdma_fsoc_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00020000, 17, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_wdma_fsoc_en)\
    CMD(a, b, c, d, e, msf.wdma_weo_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00040000, 18, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_wdma_weo_en)\
    CMD(a, b, c, d, e, msf.wdma_dswo_en, REG_CMP_EQ(c, MSF_EN, 1), 0x0000049C, 0x1581049C, 0x00080000, 19, MFB_D1A_MFBTOP_DMA_EN, MFBTOP_wdma_dswo_en)\
    CMD(a, b, c, d, e, msf_rdma.baseiy_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000A0C, 0x15810A0C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_0_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.baseic_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000A4C, 0x15810A4C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_1_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.refiy_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000A8C, 0x15810A8C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_2_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.refic_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000ACC, 0x15810ACC, 0x0000FFFF, 0, MFB_D1A_MFBDMR_3_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.dsiy_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000B0C, 0x15810B0C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_4_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.dsic_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000B4C, 0x15810B4C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_5_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.idiy_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000B8C, 0x15810B8C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_6_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.idic_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000BCC, 0x15810BCC, 0x0000FFFF, 0, MFB_D1A_MFBDMR_7_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.wei_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000C0C, 0x15810C0C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_8_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.dswi_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000C4C, 0x15810C4C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_9_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_rdma.confi_xsize, REG_CMP_EQ(c, MSF_EN, 1), 0x00000C88, 0x15810C88, 0x0000FFFF, 0, MFB_D1A_MFBDMR_10_SIZE, MFBDMR_xsize)\
    CMD(a, b, c, d, e, msf_rdma.confi_ysize, REG_CMP_EQ(c, MSF_EN, 1), 0x00000C88, 0x15810C88, 0xFFFF0000, 16, MFB_D1A_MFBDMR_10_SIZE, MFBDMR_ysize)\
    CMD(a, b, c, d, e, msf_rdma.confi_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x00000C8C, 0x15810C8C, 0x0000FFFF, 0, MFB_D1A_MFBDMR_10_STRIDE, MFBDMR_stride)\
    CMD(a, b, c, d, e, msf_wdma.fsoy_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x0000090C, 0x1581090C, 0x0000FFFF, 0, MFB_D1A_MFBDMW_0_STRIDE, MFBDMW_stride)\
    CMD(a, b, c, d, e, msf_wdma.fsoc_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x0000094C, 0x1581094C, 0x0000FFFF, 0, MFB_D1A_MFBDMW_1_STRIDE, MFBDMW_stride)\
    CMD(a, b, c, d, e, msf_wdma.weo_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x0000098C, 0x1581098C, 0x0000FFFF, 0, MFB_D1A_MFBDMW_2_STRIDE, MFBDMW_stride)\
    CMD(a, b, c, d, e, msf_wdma.dswo_stride, REG_CMP_EQ(c, MSF_EN, 1), 0x000009CC, 0x158109CC, 0x0000FFFF, 0, MFB_D1A_MFBDMW_3_STRIDE, MFBDMW_stride)\
    CMD(a, b, c, d, e, msf_unp.baseiy_yuv_bit, REG_CMP_EQ(c, MSF_EN, 1), 0x000002C4, 0x158102C4, 0x00000030, 4, MFB_D1A_UNP_0_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, msf_unp.baseiy_yuv_dng, REG_CMP_EQ(c, MSF_EN, 1), 0x000002C4, 0x158102C4, 0x00010000, 16, MFB_D1A_UNP_0_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, msf_unp.baseic_yuv_bit, REG_CMP_EQ(c, MSF_EN, 1), 0x000002CC, 0x158102CC, 0x00000030, 4, MFB_D1A_UNP_1_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, msf_unp.baseic_yuv_dng, REG_CMP_EQ(c, MSF_EN, 1), 0x000002CC, 0x158102CC, 0x00010000, 16, MFB_D1A_UNP_1_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, msf_unp.refiy_yuv_bit, REG_CMP_EQ(c, MSF_EN, 1), 0x000002D4, 0x158102D4, 0x00000030, 4, MFB_D1A_UNP_2_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, msf_unp.refiy_yuv_dng, REG_CMP_EQ(c, MSF_EN, 1), 0x000002D4, 0x158102D4, 0x00010000, 16, MFB_D1A_UNP_2_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, msf_unp.refic_yuv_bit, REG_CMP_EQ(c, MSF_EN, 1), 0x000002DC, 0x158102DC, 0x00000030, 4, MFB_D1A_UNP_3_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, msf_unp.refic_yuv_dng, REG_CMP_EQ(c, MSF_EN, 1), 0x000002DC, 0x158102DC, 0x00010000, 16, MFB_D1A_UNP_3_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, msf_unp.dsiy_yuv_bit, REG_CMP_EQ(c, MSF_EN, 1), 0x000002E4, 0x158102E4, 0x00000030, 4, MFB_D1A_UNP_4_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, msf_unp.dsiy_yuv_dng, REG_CMP_EQ(c, MSF_EN, 1), 0x000002E4, 0x158102E4, 0x00010000, 16, MFB_D1A_UNP_4_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, msf_unp.dsic_yuv_bit, REG_CMP_EQ(c, MSF_EN, 1), 0x000002EC, 0x158102EC, 0x00000030, 4, MFB_D1A_UNP_5_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, msf_unp.dsic_yuv_dng, REG_CMP_EQ(c, MSF_EN, 1), 0x000002EC, 0x158102EC, 0x00010000, 16, MFB_D1A_UNP_5_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, msf_crsp.crsp_ystep, REG_CMP_EQ(c, MFB_EN, 1), 0x00000448, 0x15810448, 0x00000007, 0, MFB_D1A_CRSP_STEP_OFST, CRSP_STEP_X)\
    CMD(a, b, c, d, e, msf_pak.fsoy_yuv_bit, REG_CMP_EQ(c, MSF_EN, 1), 0x00000460, 0x15810460, 0x00000300, 8, MFB_D1A_PAK_0_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, msf_pak.fsoy_yuv_dng, REG_CMP_EQ(c, MSF_EN, 1), 0x00000460, 0x15810460, 0x00001000, 12, MFB_D1A_PAK_0_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, msf_pak.fsoc_yuv_bit, REG_CMP_EQ(c, MSF_EN, 1), 0x00000468, 0x15810468, 0x00000300, 8, MFB_D1A_PAK_1_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, msf_pak.fsoc_yuv_dng, REG_CMP_EQ(c, MSF_EN, 1), 0x00000468, 0x15810468, 0x00001000, 12, MFB_D1A_PAK_1_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, msf.gf_sampling, REG_CMP_EQ(c, MSF_EN, 1), 0x000005B8, 0x158105B8, 0x00000007, 0, MFB_D1A_MSF_GLOBAL_FREQUENCY_STATISTICS0, MSF_GF_SAMPLING)\
    CMD(a, b, c, d, e, msf.nes_sampling, REG_CMP_EQ(c, MSF_EN, 1), 0x00000610, 0x15810610, 0x00000007, 0, MFB_D1A_MSF_NOISE_LEVEL_STATISTICS0, MSF_NES_SAMPLING)\
    CMD(a, b, c, d, e, msf.first_tile, REG_CMP_EQ(c, MSF_EN, 1), 0x00000500, 0x15810500, 0x00000001, 0, MFB_D1A_MSF_TOP_CTRL, MSF_FIRST_TILE)\
    CMD(a, b, c, d, e, msf.last_tile, REG_CMP_EQ(c, MSF_EN, 1), 0x00000500, 0x15810500, 0x00000002, 1, MFB_D1A_MSF_TOP_CTRL, MSF_LAST_TILE)\
    CMD(a, b, c, d, e, msf.roi_x1, REG_CMP_EQ(c, MSF_EN, 1), 0x00000618, 0x15810618, 0x00003FFF, 0, MFB_D1A_MSF_TILE_STATISTICS0, MSF_TILE_ROI_X1)\
    CMD(a, b, c, d, e, msf.roi_x2, REG_CMP_EQ(c, MSF_EN, 1), 0x0000061C, 0x1581061C, 0x00003FFF, 0, MFB_D1A_MSF_TILE_STATISTICS1, MSF_TILE_ROI_X2)\
    CMD(a, b, c, d, e, msf.roi_y1, REG_CMP_EQ(c, MSF_EN, 1), 0x00000618, 0x15810618, 0x3FFF0000, 16, MFB_D1A_MSF_TILE_STATISTICS0, MSF_TILE_ROI_Y1)\
    CMD(a, b, c, d, e, msf.roi_y2, REG_CMP_EQ(c, MSF_EN, 1), 0x0000061C, 0x1581061C, 0x3FFF0000, 16, MFB_D1A_MSF_TILE_STATISTICS1, MSF_TILE_ROI_Y2)\
    CMD(a, b, c, d, e, msf_slk.slk_hrz_comp, REG_CMP_EQ(c, MSF_EN, 1), 0x00000020, 0x15810020, 0x00003FFF, 0, MFB_D1A_SLK_RZ, SLK_HRZ_COMP)\
    CMD(a, b, c, d, e, msf_slk.slk_vrz_comp, REG_CMP_EQ(c, MSF_EN, 1), 0x00000020, 0x15810020, 0x3FFF0000, 16, MFB_D1A_SLK_RZ, SLK_VRZ_COMP)\
    /* Dump MFB registers - end */\
    /* Manually insert more MFB registers below */\

#define HW_MSS_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump MSS registers - start, replaced with auto-code gen */\
    CMD(a, b, c, d, e, top.mss_en, true, 0x00000400, 0x15812400, 0x00000001, 0, MSS_D1A_MSSTOP_TOP_CFG, MSSTOP_MSS_EN)\
    CMD(a, b, c, d, e, mss.rdma_mssiy_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000404, 0x15812404, 0x00000001, 0, MSS_D1A_MSSTOP_DMA_EN, MSSTOP_rdma_mssiy_en)\
    CMD(a, b, c, d, e, mss.rdma_mssic_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000404, 0x15812404, 0x00000002, 1, MSS_D1A_MSSTOP_DMA_EN, MSSTOP_rdma_mssic_en)\
    CMD(a, b, c, d, e, mss.mssiy_unp_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000040, 6, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_mssiy_unp_en)\
    CMD(a, b, c, d, e, mss.mssic_unp_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000080, 7, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_mssic_unp_en)\
    CMD(a, b, c, d, e, mss.ydrz_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000001, 0, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_ydrz_en)\
    CMD(a, b, c, d, e, mss.vdrz_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000004, 2, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_vdrz_en)\
    CMD(a, b, c, d, e, mss.cdrz_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000002, 1, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_cdrz_en)\
    CMD(a, b, c, d, e, mss.crp_drzy_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00001000, 12, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_crp_drzy_en)\
    CMD(a, b, c, d, e, mss.crp_drzc_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00002000, 13, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_crp_drzc_en)\
    CMD(a, b, c, d, e, mss.mssoy_pak_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000100, 8, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_mssoy_pak_en)\
    CMD(a, b, c, d, e, mss.mssoc_pak_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000200, 9, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_mssoc_pak_en)\
    CMD(a, b, c, d, e, mss.wdma_mssoy_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000404, 0x15812404, 0x00000004, 2, MSS_D1A_MSSTOP_DMA_EN, MSSTOP_wdma_mssoy_en)\
    CMD(a, b, c, d, e, mss.wdma_mssoc_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000404, 0x15812404, 0x00000008, 3, MSS_D1A_MSSTOP_DMA_EN, MSSTOP_wdma_mssoc_en)\
    CMD(a, b, c, d, e, mss.wif_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000010, 4, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_wif_en)\
    CMD(a, b, c, d, e, mss.crsp_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000020, 5, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_crsp_en)\
    CMD(a, b, c, d, e, mss.crp_omcy_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00004000, 14, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_crp_omcy_en)\
    CMD(a, b, c, d, e, mss.crp_omcc_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00008000, 15, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_crp_omcc_en)\
    CMD(a, b, c, d, e, mss.omcoy_pak_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000400, 10, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_omcoy_pak_en)\
    CMD(a, b, c, d, e, mss.omcoc_pak_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000408, 0x15812408, 0x00000800, 11, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_omcoc_pak_en)\
    CMD(a, b, c, d, e, mss.wdma_omcoy_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000404, 0x15812404, 0x00000010, 4, MSS_D1A_MSSTOP_DMA_EN, MSSTOP_wdma_omcoy_en)\
    CMD(a, b, c, d, e, mss.wdma_omcoc_en, REG_CMP_EQ(c, MSS_EN, 1), 0x00000404, 0x15812404, 0x00000020, 5, MSS_D1A_MSSTOP_DMA_EN, MSSTOP_wdma_omcoc_en)\
    CMD(a, b, c, d, e, top.omc_en_sel, true, 0x00000408, 0x15812408, 0x00000008, 3, MSS_D1A_MSSTOP_ENG_EN, MSSTOP_omc_en_SEL)\
    CMD(a, b, c, d, e, top.drz_src_sel, true, 0x00000400, 0x15812400, 0x00000004, 2, MSS_D1A_MSSTOP_TOP_CFG, MSSTOP_MSS_DRZ_SRC_SEL)\
    CMD(a, b, c, d, e, mss_rdma.mssiy_stride, REG_CMP_EQ(c, MSS_EN, 1), 0x00000A0C, 0x15812A0C, 0x0000FFFF, 0, MSS_D1A_MSSDMR_0_STRIDE, MSSDMR_stride)\
    CMD(a, b, c, d, e, mss_rdma.mssic_stride, REG_CMP_EQ(c, MSS_EN, 1), 0x00000A4C, 0x15812A4C, 0x0000FFFF, 0, MSS_D1A_MSSDMR_1_STRIDE, MSSDMR_stride)\
    CMD(a, b, c, d, e, mss_crsp.crsp_ystep, REG_CMP_EQ(c, MSS_EN, 1), 0x00000208, 0x15812208, 0x00000007, 0, MSS_D1A_CRSP_STEP_OFST, CRSP_STEP_X)\
    CMD(a, b, c, d, e, mss_unp.mssiy_yuv_bit, REG_CMP_EQ(c, MSS_EN, 1), 0x00000244, 0x15812244, 0x00000030, 4, MSS_D1A_UNP_0_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, mss_unp.mssiy_yuv_dng, REG_CMP_EQ(c, MSS_EN, 1), 0x00000244, 0x15812244, 0x00010000, 16, MSS_D1A_UNP_0_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, mss_unp.mssic_yuv_bit, REG_CMP_EQ(c, MSS_EN, 1), 0x00000254, 0x15812254, 0x00000030, 4, MSS_D1A_UNP_1_CONT, UNP_YUV_BIT)\
    CMD(a, b, c, d, e, mss_unp.mssic_yuv_dng, REG_CMP_EQ(c, MSS_EN, 1), 0x00000254, 0x15812254, 0x00010000, 16, MSS_D1A_UNP_1_CONT, UNP_YUV_DNG)\
    CMD(a, b, c, d, e, mss_pak.mssoy_yuv_bit, REG_CMP_EQ(c, MSS_EN, 1), 0x000003C0, 0x158123C0, 0x00000300, 8, MSS_D1A_PAK_0_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, mss_pak.mssoy_yuv_dng, REG_CMP_EQ(c, MSS_EN, 1), 0x000003C0, 0x158123C0, 0x00001000, 12, MSS_D1A_PAK_0_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, mss_pak.mssoc_yuv_bit, REG_CMP_EQ(c, MSS_EN, 1), 0x000003C8, 0x158123C8, 0x00000300, 8, MSS_D1A_PAK_1_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, mss_pak.mssoc_yuv_dng, REG_CMP_EQ(c, MSS_EN, 1), 0x000003C8, 0x158123C8, 0x00001000, 12, MSS_D1A_PAK_1_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, mss_wdma.mssoy_stride, REG_CMP_EQ(c, MSS_EN, 1), 0x0000090C, 0x1581290C, 0x0000FFFF, 0, MSS_D1A_MSSDMW_0_STRIDE, MSSDMW_stride)\
    CMD(a, b, c, d, e, mss_wdma.mssoc_stride, REG_CMP_EQ(c, MSS_EN, 1), 0x0000094C, 0x1581294C, 0x0000FFFF, 0, MSS_D1A_MSSDMW_1_STRIDE, MSSDMW_stride)\
    CMD(a, b, c, d, e, mss_pak.omcoy_yuv_bit, REG_CMP_EQ(c, MSS_EN, 1), 0x000003D0, 0x158123D0, 0x00000300, 8, MSS_D1A_PAK_2_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, mss_pak.omcoy_yuv_dng, REG_CMP_EQ(c, MSS_EN, 1), 0x000003D0, 0x158123D0, 0x00001000, 12, MSS_D1A_PAK_2_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, mss_pak.omcoc_yuv_bit, REG_CMP_EQ(c, MSS_EN, 1), 0x000003D8, 0x158123D8, 0x00000300, 8, MSS_D1A_PAK_3_CONT, PAK_YUV_BIT)\
    CMD(a, b, c, d, e, mss_pak.omcoc_yuv_dng, REG_CMP_EQ(c, MSS_EN, 1), 0x000003D8, 0x158123D8, 0x00001000, 12, MSS_D1A_PAK_3_CONT, PAK_YUV_DNG)\
    CMD(a, b, c, d, e, mss_wdma.omcoy_stride, REG_CMP_EQ(c, MSS_EN, 1), 0x0000098C, 0x1581298C, 0x0000FFFF, 0, MSS_D1A_MSSDMW_2_STRIDE, MSSDMW_stride)\
    CMD(a, b, c, d, e, mss_wdma.omcoc_stride, REG_CMP_EQ(c, MSS_EN, 1), 0x000009CC, 0x158129CC, 0x0000FFFF, 0, MSS_D1A_MSSDMW_3_STRIDE, MSSDMW_stride)\
    /* Dump MSS registers - end */\
    /* Manually insert more MSS registers below */\

typedef struct ISP_TPIPE_CONFIG_TOP_STRUCT
{
    int pixel_id;
    int cam_in_fmt;
    int ctl_extension_en;
    int fg_mode;
    int pakg_fg_out;
    int ufo_imgi_en;
    int ufo_imgbi_en;
    int ufdi_fmt;
    int vipi_fmt;
    int img3o_fmt;
    int crzo_fmt;
    int timgo_fmt;
    int crp2_sel;
    int ynr_sel;
    int timgo_sel;
    int traw_sel;
    int plnr_sel;
    int plnr2_sel;
    int dgn_sel;
    int lsc_sel;
    int flc_sel;
    int g2cx_sel;
    int c24d1_sel;
    int srz_sel;
    int mix1_sel;
    int crz_sel;
    int nr3d_pre_i_sel;
    int mix3_w_sel;
    int ynr_mfb_sel;
    int fe_sel;
    int feo_sel;
    int smt5_sel;
    int ynr_gmap_ltm_mode;
    int imgi_en;
    int imgbi_en;
    int imgci_en;
    int vipi_en;
    int vipbi_en;
    int vipci_en;
    int ufdi_en;
    int lcei_en;
    int timgo_en;
    int unp_en;
    int unp2_en;
    int unp3_en;
    int unp4_en;
    int unp5_en;
    int unp6_en;
    int unp7_en;
    int unp8_en;
    int unp9_en;
    int unp10_en;
    int unp11_en;
    int unp16_en;
    int bs_en;
    int wif2_en;
    int ufd_en;
    int bpc_en;
    int lsc_en;
    int wb_en;
    int rcp_en;
    int rcp2_en;
    int rcp3_en;
    int rcp4_en;
    int pak_en;
    int pak2_en;
    int pak3_en;
    int pak4_en;
    int pak5_en;
    int pak6_en;
    int pak7_en;
    int pak8_en;
    int pak16_en;
    int c24_en;
    int hlr_en;
    int dgn_en;
    int ltm_en;
    int dm_en;
    int gdr_en;
    int ldnr_en;
    int align_en;
    int flc_en;
    int ccm_en;
    int ccm2_en;
    int ggm_en;
    int ggm2_en;
    int wsync_en;
    int g2cx_en;
    int c42_en;
    int sl2b_en;
    int ynr_en;
    int dmgi_en;
    int depi_en;
    int cnr_en;
    int srz1_en;
    int mix1_en;
    int srz2_en;
    int mix2_en;
    int slk1_en;
    int slk2_en;
    int slk3_en;
    int slk4_en;
    int slk5_en;
    int slk6_en;
    int ndg_en;
    int ndg2_en;
    int c24d3_en;
    int c24d2_en;
    int c2g_en;
    int iggm_en;
    int ccm3_en;
    int ggm3_en;
    int dce_en;
    int dces_en;
    int dceso_en;
    int g2c_en;
    int c42d2_en;
    int ee_en;
    int aks_en;
    int lce_en;
    int mix3_en;
    int crz_en;
    int feo_en;
    int c02_en;
    int c02d2_en;
    int nr3d_en;
    int color_en;
    int crsp_en;
    int img3o_en;
    int img3bo_en;
    int img3co_en;
    int mcrp_en;
    int mcrp2_en;
    int plnr1_en;
    int plnr2_en;
    int plnw1_en;
    int plnw2_en;
    int crzo_en;
    int crzbo_en;
    int dfe_en;
    int obc_en;
    int zfus_en;
    int srz3_en;
    int srz4_en;
    int smt1_en;
    int smt1i_en;
    int smt1o_en;
    int smt2_en;
    int smt2i_en;
    int smt2o_en;
    int smt3_en;
    int smt3i_en;
    int smt3o_en;
    int smt4_en;
    int smt4i_en;
    int smt4o_en;
    int smt5_en;
    int smt5i_en;
    int smt5o_en;
    int smt6_en;
    int smt6i_en;
    int smt6o_en;
    int ufbcd_en;
    int ufbce_en;
    /* mfb */
    int mfb_en;
    int msf_en;
    int mss_en;
    int omc_en_sel;
    int drz_src_sel;
    int sram_mode_sel;
    /* new */
    int yufd_en;
    int tdrsv_en;
    int tdrsv2_en;
    int tdrsvp_en;
    int tdrsvp2_en;
    int tdrsvpi_en;
    int dl_mss_en;
}ISP_TPIPE_CONFIG_TOP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SW_STRUCT
{
    int log_en;
    int tpipe_sel_mode;
    int tpipe_dual_mode;
    int tpipe_irq_mode;
    int src_width;
    int src_height;
    int tpipe_width;
    int tpipe_height;
    int src_width_wpe;
    int src_height_wpe;
    int tpipe_width_wpe;
    int tpipe_height_wpe;
    int src_width_mfb;
    int src_height_mfb;
    int tpipe_width_mfb;
    int tpipe_height_mfb;
    int src_width_mss;
    int src_height_mss;
    int tpipe_width_mss;
    int tpipe_height_mss;
    int tpipe_dual_en;
}ISP_TPIPE_CONFIG_SW_STRUCT;

typedef struct MFB_Config_Cmd {
    unsigned int MFB_D1A_MFBDMW_0_MFBDMW_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMW_1_MFBDMW_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMW_2_MFBDMW_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMW_3_MFBDMW_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_0_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_1_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_2_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_3_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_4_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_5_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_6_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_7_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_8_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_9_MFBDMR_BASE_ADDR;
    unsigned int MFB_D1A_MFBDMR_10_MFBDMR_BASE_ADDR;
}MFB_Config_Cmd;

typedef struct MSS_Config_Cmd {
    unsigned int MSS_D1A_MSSDMW_0_MSSDMW_BASE_ADDR;
    unsigned int MSS_D1A_MSSDMW_1_MSSDMW_BASE_ADDR;
    unsigned int MSS_D1A_MSSDMW_2_MSSDMW_BASE_ADDR;
    unsigned int MSS_D1A_MSSDMW_3_MSSDMW_BASE_ADDR;
    unsigned int MSS_D1A_MSSTOP_MSSTOP_ENG_EN;
}MSS_Config_Cmd;


typedef struct ISP_DRIVER_CONFIG_STRUCT
{
    unsigned int cq_basePA;
    ISP_TPIPE_P2_CQ_ENUM p2Cq;
    unsigned long DesCqPa;
    unsigned long DesCqVa; // for debugging
    unsigned int *pIspVirRegAddr_pa;
    unsigned int *pIspVirRegAddr_va;
    unsigned long tpipeTablePa;
    unsigned int *tpipeTableVa;
    unsigned int RingBufIdx;
    unsigned int burstCqIdx;
    unsigned int dupCqIdx;
    unsigned int frameNum;
    E_ISP_DIP_CQ cqIdx;                     //! index of pass2 cmdQ
    unsigned int frameflag;
    unsigned long smx1iPa;
    unsigned long smx2iPa;
    unsigned long smx3iPa;
    unsigned long smx4iPa;
    unsigned long smx5iPa;
    unsigned long smx6iPa;
    //ISP2MDP_STRUCT isp2mdpcfg;
    char* m_pMetLogBuf;
    unsigned int m_MetLogBufSize;
    unsigned int debugRegDump; // dump isp reg from GCE
    unsigned int framemode_total_in_w;  //total width of in-dma for frame mode only
    unsigned int framemode_total_out_w; //total width od out-dma for frame mode only
    unsigned int framemode_h;       //height for frame mode only
    unsigned int total_data_size;     // add for bandwidth
    unsigned int dmgi_data_size;
    unsigned int depi_data_size;
    unsigned int lcei_data_size;
    unsigned int timgo_data_size;
    unsigned int regCount;
    unsigned int ReadAddrList[MAX_READ_REG_NUM];
    unsigned long imgi_base_addr;
    unsigned long tpipeTablePa_wpe;
    unsigned int *tpipeTableVa_wpe;
    unsigned long tpipeTablePa_mfb;//hung-wen::msf-dip and backward compatible mfb used
    unsigned int *tpipeTableVa_mfb;//hung-wen::msf-dip and backward compatible mfb used
    unsigned long tpipeTablePa_mss;//hung-wen::dip-mss used
    unsigned int *tpipeTableVa_mss;//hung-wen::dip-mss used
    unsigned long MssCmdqPa;//hung-wen::dip-mss and backward compatible mfb used
    unsigned int *pMssCmdqVa;//hung-wen::dip-mss and backward compatible mfb used
    unsigned long MssCmdqNum;//hung-wen::dip-mss and backward compatible mfb used
    unsigned long MfbCmdqPa;//hung-wen::msf-dip and backward compatible mfb used
    unsigned int *pMfbCmdqVa;//hung-wen::msf-dip and backward compatible mfb used
    unsigned long MfbCmdqNum;//hung-wen::msf-dip and backward compatible mfb used
    unsigned int *dl_tpipeTableVa_wpe;
    unsigned int dupCqIdx_wpe;
    unsigned int regCount_wpe;
    unsigned int ReadAddrList_wpe[MAX_READ_REG_NUM];
    unsigned int *wpecommand;
    MFB_Config_Cmd *mfbcommand;
    MSS_Config_Cmd *msscommand;
    // DIP settings for GCE cmd
    unsigned long cqSecHdl;
    unsigned long cqSecSize;
    unsigned long DesCqOft;
    unsigned long DesCqSize;
    unsigned long VirtRegPa;
    unsigned long VirtRegVa;
    unsigned long VirtRegOft;
    unsigned long tpipeTableSecHdl;
    unsigned long tpipeTableSecSize;
    unsigned long tpipeTableOft;
    unsigned long smxSecHdl;
    unsigned long smxSecSize;
    unsigned long smx1iOft;
    unsigned long smx2iOft;
    unsigned long smx3iOft;
    unsigned long smx4iOft;
    unsigned long smx5iOft;
    unsigned long smx6iOft;
    unsigned long dip_ctl_yuv_en;
    unsigned long dip_ctl_yuv2_en;
    unsigned long dip_ctl_yuv3_en;
    unsigned long dip_ctl_rgb_en;
    unsigned long dip_ctl_rgb2_en;
    unsigned long dip_ctl_dma_en;
    unsigned long dip_ctl_dma2_en;
    unsigned long dip_ctl_fmt_sel;
    unsigned long dip_ctl_fmt2_sel;
    unsigned long dip_ctl_mux_sel;
    unsigned long dip_ctl_mux2_sel;
    unsigned long dip_ctl_misc_sel;
    unsigned long dip_img2o_base_addr;
    unsigned long dip_img2bo_base_addr;
    unsigned long dip_img3o_base_addr;
    unsigned long dip_img3bo_base_addr;
    unsigned long dip_img3co_base_addr;
    unsigned long dip_feo_base_addr;
    unsigned long dip_dceso_base_addr;
    unsigned long dip_timgo_base_addr;
    unsigned long dip_imgi_base_addr;
    unsigned long dip_imgbi_base_addr;
    unsigned long dip_imgci_base_addr;
    unsigned long dip_vipi_base_addr;
    unsigned long dip_vip2i_base_addr;
    unsigned long dip_vip3i_base_addr;
    unsigned long dip_dmgi_base_addr;
    unsigned long dip_depi_base_addr;
    unsigned long dip_lcei_base_addr;
    unsigned long dip_ufdi_base_addr;
    unsigned long dip_ufbci_base_addr;
    unsigned long dip_ufbco_base_addr;
    unsigned long dip_imgbi_base_vaddr;
    unsigned long dip_imgci_base_vaddr;
    unsigned long dip_dmgi_base_vaddr;
    unsigned long dip_depi_base_vaddr;
    unsigned long dip_lcei_base_vaddr;
    unsigned int dip_img2o_size[3];
    unsigned int dip_img3o_size[3];
    unsigned int dip_feo_size[3];
    unsigned int dip_dceso_size[3];
    unsigned int dip_timgo_size[3];
    unsigned int dip_imgi_size[3];
    unsigned int dip_imgbi_size[3];
    unsigned int dip_imgci_size[3];
    unsigned int dip_vipi_size[3];
    unsigned int dip_dmgi_size[3];
    unsigned int dip_depi_size[3];
    unsigned int dip_lcei_size[3];
    unsigned int dip_ufdi_size[3];
    unsigned int dip_ufbci_size[3];
    unsigned int dip_ufbco_size[3];
    unsigned int dip_secure_tag;
    unsigned int dip_img2o_secure_tag;
    unsigned int dip_img2bo_secure_tag;
    unsigned int dip_img3o_secure_tag;
    unsigned int dip_img3bo_secure_tag;
    unsigned int dip_img3co_secure_tag;
    unsigned int dip_feo_secure_tag;
    unsigned int dip_dceso_secure_tag;
    unsigned int dip_timgo_secure_tag;
    unsigned int dip_imgi_secure_tag;
    unsigned int dip_imgbi_secure_tag;
    unsigned int dip_imgci_secure_tag;
    unsigned int dip_vipi_secure_tag;
    unsigned int dip_vip2i_secure_tag;
    unsigned int dip_vip3i_secure_tag;
    unsigned int dip_dmgi_secure_tag;
    unsigned int dip_depi_secure_tag;
    unsigned int dip_lcei_secure_tag;
    unsigned int dip_ufdi_secure_tag;
    unsigned int dip_ufbci_secure_tag;
    unsigned int dip_ufbco_secure_tag;
}ISP_DRIVER_CONFIG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGI_STRUCT
{
    int imgi_v_flip_en;
    int imgi_stride;
}ISP_TPIPE_CONFIG_IMGI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT1I_STRUCT
{
    int smt1i_v_flip_en;
    int smt1i_xsize;
    int smt1i_ysize;
}ISP_TPIPE_CONFIG_SMT_D1AI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT2I_STRUCT
{
    int smt2i_v_flip_en;
    int smt2i_xsize;
    int smt2i_ysize;
}ISP_TPIPE_CONFIG_SMT2I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT3I_STRUCT
{
    int smt3i_v_flip_en;
    int smt3i_xsize;
    int smt3i_ysize;
}ISP_TPIPE_CONFIG_SMT3I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT4I_STRUCT
{
    int smt4i_v_flip_en;
    int smt4i_xsize;
    int smt4i_ysize;
}ISP_TPIPE_CONFIG_SMT4I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT5I_STRUCT
{
    int smt5i_v_flip_en;
    int smt5i_xsize;
    int smt5i_ysize;
}ISP_TPIPE_CONFIG_SMT5I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT6I_STRUCT
{
    int smt6i_v_flip_en;
    int smt6i_xsize;
    int smt6i_ysize;
}ISP_TPIPE_CONFIG_SMT6I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGBI_STRUCT
{
    int imgbi_offset;
    int imgbi_xsize;
    int imgbi_ysize;
    int imgbi_stride;
}ISP_TPIPE_CONFIG_IMGBI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGCI_STRUCT
{
    int imgci_v_flip_en;
    int imgci_stride;
}ISP_TPIPE_CONFIG_IMGCI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UFDI_STRUCT
{
    int ufdi_v_flip_en;
    int ufdi_xsize;
    int ufdi_ysize;
    int ufdi_stride;
}ISP_TPIPE_CONFIG_UFDI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LSC_STRUCT
{
    int extend_coef_mode;
    int sdblk_width;
    int sdblk_xnum;
    int sdblk_last_width;
    int sdblk_height;
    int sdblk_ynum;
    int sdblk_last_height;
}ISP_TPIPE_CONFIG_LSC_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LTM_STRUCT
{
    int blk_x_num;
    int blk_y_num;
    int blk_width;
    int blk_height;
}ISP_TPIPE_CONFIG_LTM_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2_STRUCT
{
    int sl2_hrz_comp;
    int sl2_vrz_comp;
}ISP_TPIPE_CONFIG_SL2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DM_STRUCT
{
    int dm_byp;
}ISP_TPIPE_CONFIG_DM_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIPI_STRUCT
{
    int vipi_v_flip_en;
    int vipi_xsize;
    int vipi_ysize;
    int vipi_stride;
}ISP_TPIPE_CONFIG_VIPI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIPBI_STRUCT
{
    int vipbi_v_flip_en;
    int vipbi_xsize;
    int vipbi_ysize;
    int vipbi_stride;
}ISP_TPIPE_CONFIG_VIPBI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIPCI_STRUCT
{
    int vipci_v_flip_en;
    int vipci_xsize;
    int vipci_ysize;
    int vipci_stride;
}ISP_TPIPE_CONFIG_VIPCI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UFD_STRUCT
{
    int ufd_bs2_au_start;
    int ufd_bs3_au_start;
    int ufd_bond_mode;
    int ufd_bond2_mode; 
    int ufd_sel;
}ISP_TPIPE_CONFIG_UFD_STRUCT;

typedef struct ISP_TPIPE_CONFIG_YUFD_STRUCT
{
    int yufd_bs2_au_start;
    int yufd_bs3_au_start;
    int yufd_bond_mode;
    int yufd_bond2_mode;
    int yufd_code_mode;
}ISP_TPIPE_CONFIG_YUFD_STRUCT;

typedef struct ISP_TPIPE_CONFIG_TIMGO_STRUCT
{
    int timgo_stride;
    int timgo_xoffset;
    int timgo_yoffset;
    int timgo_xsize;
    int timgo_ysize;
}ISP_TPIPE_CONFIG_TIMGO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRP_STRUCT
{
    int crop_xstart;
    int crop_xend;
    int crop_ystart;
    int crop_yend;
}ISP_TPIPE_CONFIG_CRP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DCES_STRUCT
{
    int dces_crop_xstart;
    int dces_crop_xend;
    int dces_crop_ystart;
    int dces_crop_yend;
}ISP_TPIPE_CONFIG_DCES_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DCESO_STRUCT
{
    int dceso_xsize;
    int dceso_ysize;
}ISP_TPIPE_CONFIG_DCESO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_G2CX_STRUCT
{
    int g2cx_shade_en;
    int g2cx_shade_xmid;
    int g2cx_shade_ymid;
    int g2cx_shade_var;
}ISP_TPIPE_CONFIG_G2CX_STRUCT;

typedef struct ISP_TPIPE_CONFIG_YNR_STRUCT
{
    int eny;
    int enc;
    int video_mode;
    int skin_link;
    int lce_link;
    int msf_link;
}ISP_TPIPE_CONFIG_YNR_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CNR_STRUCT
{
    int bpc_en;
    int enc;
    int scale_mode;
    int mode;
    int video_mode;
    int abf_en;
}ISP_TPIPE_CONFIG_CNR_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SLK_STRUCT
{
    int slk_hrz_comp;
    int slk_vrz_comp;
}ISP_TPIPE_CONFIG_SLk_STRUCT;

typedef struct ISP_TPIPE_CONFIG_HFG_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_HFG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NDG_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_NDG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NDG2_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_NDG2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_EE_STRUCT
{
    int ee_out_edge_sel;
}ISP_TPIPE_CONFIG_EE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LCEI_STRUCT
{
    int lcei_v_flip_en;
    int lcei_xsize;
    int lcei_ysize;
    int lcei_stride;
}ISP_TPIPE_CONFIG_LCEI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LCE_STRUCT
{
    int lce_lc_tone;    
    int lce_bc_mag_kubnx;
    int lce_slm_width;
    int lce_bc_mag_kubny;
    int lce_slm_height;
    int lce_full_xoff;
    int lce_full_yoff;
    int lce_full_slm_width;
    int lce_full_slm_height;
    int lce_full_out_height;
}ISP_TPIPE_CONFIG_LCE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRZ_STRUCT
{
    int crz_input_crop_width;
    int crz_input_crop_height;
    int crz_output_width;
    int crz_output_height;
    int crz_luma_horizontal_integer_offset;/* pixel base */
    int crz_luma_horizontal_subpixel_offset;/* 20 bits base */
    int crz_luma_vertical_integer_offset;/* pixel base */
    int crz_luma_vertical_subpixel_offset;/* 20 bits base */
    int crz_horizontal_luma_algorithm;
    int crz_vertical_luma_algorithm;
    int crz_horizontal_coeff_step;
    int crz_vertical_coeff_step;
}ISP_TPIPE_CONFIG_CRZ_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRZO_STRUCT
{
    int crzo_stride;
    int crzo_xoffset;
    int crzo_yoffset;
    int crzo_xsize;
    int crzo_ysize;
}ISP_TPIPE_CONFIG_CRZO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRZBO_STRUCT
{
    int crzbo_stride;
    int crzbo_xoffset;
    int crzbo_yoffset;
    int crzbo_xsize;
    int crzbo_ysize;
}ISP_TPIPE_CONFIG_CRZBO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SRZ_STRUCT
{
    int srz_input_crop_width;
    int srz_input_crop_height;
    int srz_output_width;
    int srz_output_height;
    int srz_luma_horizontal_integer_offset;/* pixel base */
    int srz_luma_horizontal_subpixel_offset;/* 20 bits base */
    int srz_luma_vertical_integer_offset;/* pixel base */
    int srz_luma_vertical_subpixel_offset;/* 20 bits base */
    int srz_horizontal_coeff_step;
    int srz_vertical_coeff_step;
}ISP_TPIPE_CONFIG_SRZ_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSF_YURZ_STRUCT
{
    int yurz_input_width;
    int yurz_input_height;
    int yurz_output_width;
    int yurz_output_height;
    int yurz_luma_horizontal_integer_offset;/* pixel base */
    int yurz_luma_horizontal_subpixel_offset;/* 15 bits base */
    int yurz_luma_vertical_integer_offset;/* pixel base */
    int yurz_luma_vertical_subpixel_offset;/* 15 bits base */
    int yurz_horizontal_coeff_step;
    int yurz_vertical_coeff_step;
}ISP_TPIPE_CONFIG_MSF_YURZ_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSF_CURZ_STRUCT
{
    int curz_input_width;
    int curz_input_height;
    int curz_output_width;
    int curz_output_height;
    int curz_luma_horizontal_integer_offset;/* pixel base */
    int curz_luma_horizontal_subpixel_offset;/* 15 bits base */
    int curz_luma_vertical_integer_offset;/* pixel base */
    int curz_luma_vertical_subpixel_offset;/* 15 bits base */
    int curz_horizontal_coeff_step;
    int curz_vertical_coeff_step;
}ISP_TPIPE_CONFIG_MSF_CURZ_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DFE_STRUCT
{
    int dfe_mode;
}ISP_TPIPE_CONFIG_DFE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_FEO_STRUCT
{
    int feo_stride;
}ISP_TPIPE_CONFIG_FEO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NR3D_STRUCT
{
    int nr3d_on_en;
    int nr3d_snr_en;
    int nr3d_on_xoffset;
    int nr3d_on_yoffset;
    int nr3d_on_width;
    int nr3d_on_height;
    int dma_ofst_x;
    int dma_ofst_y;
}ISP_TPIPE_CONFIG_NR3D_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRSP_STRUCT
{
    int crsp_ystep;
    int crsp_xoffset;
    int crsp_yoffset;
}ISP_TPIPE_CONFIG_CRSP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3O_STRUCT
{
    int img3o_stride;
    int img3o_xoffset;
    int img3o_yoffset;
    int img3o_xsize;
    int img3o_ysize;
}ISP_TPIPE_CONFIG_IMG3O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3BO_STRUCT
{
    int img3bo_stride;
    int img3bo_xsize;
    int img3bo_ysize;
}ISP_TPIPE_CONFIG_IMG3BO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3CO_STRUCT
{
    int img3co_stride;
    int img3co_xsize;
    int img3co_ysize;
}ISP_TPIPE_CONFIG_IMG3CO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DMGI_STRUCT
{
    int dmgi_v_flip_en;
    int dmgi_stride;
    int dmgi_offset;
    int dmgi_xsize;
    int dmgi_ysize;
}ISP_TPIPE_CONFIG_DMGI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DEPI_STRUCT
{
    int depi_v_flip_en;
    int depi_stride;
    int depi_xsize;
    int depi_ysize;
}ISP_TPIPE_CONFIG_DEPI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT1O_STRUCT
{
    int smt1o_xsize;
    int smt1o_ysize;
}ISP_TPIPE_CONFIG_SMT1O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT2O_STRUCT
{
    int smt2o_xsize;
    int smt2o_ysize;
}ISP_TPIPE_CONFIG_SMT2O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT3O_STRUCT
{
    int smt3o_xsize;
    int smt3o_ysize;
}ISP_TPIPE_CONFIG_SMT3O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT4O_STRUCT
{
    int smt4o_xsize;
    int smt4o_ysize;
}ISP_TPIPE_CONFIG_SMT4O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT5O_STRUCT
{
    int smt5o_xsize;
    int smt5o_ysize;
}ISP_TPIPE_CONFIG_SMT5O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT6O_STRUCT
{
    int smt6o_xsize;
    int smt6o_ysize;
}ISP_TPIPE_CONFIG_SMT6O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UNP_STRUCT
{
    int yuv_bit;
    int yuv_dng;
}ISP_TPIPE_CONFIG_UNP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_PAK_STRUCT
{
    int yuv_bit;
    int yuv_dng;
}ISP_TPIPE_CONFIG_PAK_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSS_STRUCT
{
    int rdma_mssiy_en;
    int rdma_mssic_en;
    int mssiy_unp_en;
    int mssic_unp_en;
    int ydrz_en;
    int vdrz_en;
    int cdrz_en;
    int crp_drzy_en;
    int crp_drzc_en;
    int mssoy_pak_en;
    int mssoc_pak_en;
    int wdma_mssoy_en;
    int wdma_mssoc_en;
    int wif_en;
    int crsp_en;
    int crp_omcy_en;
    int crp_omcc_en;
    int omcoy_pak_en;
    int omcoc_pak_en;
    int wdma_omcoy_en;
    int wdma_omcoc_en;
}ISP_TPIPE_CONFIG_MSS_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSS_RDMA_STRUCT
{
    int mssiy_stride;
    int mssic_stride;
}ISP_TPIPE_CONFIG_MSS_RDMA_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSS_PAK_STRUCT
{
    int mssoy_yuv_bit;
    int mssoy_yuv_dng;
    int mssoc_yuv_bit;
    int mssoc_yuv_dng;
    int omcoy_yuv_bit;
    int omcoy_yuv_dng;
    int omcoc_yuv_bit;
    int omcoc_yuv_dng;
}ISP_TPIPE_CONFIG_MSS_PAK_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSS_WDMA_STRUCT
{
    int mssoy_stride;
    int mssoc_stride;
    int omcoy_stride;
    int omcoc_stride;
}ISP_TPIPE_CONFIG_MSS_WDMA_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSF_STRUCT
{
    int slk_en;
    int rdma_baseiy_en;
    int rdma_baseic_en;
    int rdma_refiy_en;
    int rdma_refic_en;
    int rdma_dsiy_en;
    int rdma_dsic_en;
    int rdma_idiy_en;
    int rdma_idic_en;
    int rdma_wei_en;
    int rdma_dswi_en;
    int rdma_confi_en;
    int lpf_baseiy_en;
    int lpf_baseic_en;
    int lpf_refiy_en;
    int lpf_refic_en;
    int yurz_dsi_en;
    int curz_dsi_en;
    int yurz_idi_en;
    int curz_idi_en;
    int yurz_dswi_en;
    int curz_dswi_en;
    int yurz_confi_en;
    int curz_confi_en;
    int crp_y_en;
    int crp_w_en;
    int crp_m_en;
    int crsp_en;
    int wdma_fsoy_en;
    int wdma_fsoc_en;
    int wdma_weo_en;
    int wdma_dswo_en;
    int gf_sampling;
    int nes_sampling;
    int first_tile;
    int last_tile;
    int roi_x1;
    int roi_x2;
    int roi_y1;
    int roi_y2;
}ISP_TPIPE_CONFIG_MSF_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSF_RDMA_STRUCT
{
    int baseiy_stride;
    int baseic_stride;
    int refiy_stride;
    int refic_stride;
    int dsiy_stride;
    int dsic_stride;
    int idiy_stride;
    int idic_stride;
    int wei_stride;
    int dswi_stride;
    int confi_xsize;
    int confi_ysize;
    int confi_stride;
}ISP_TPIPE_CONFIG_MSF_RDMA_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSF_WDMA_STRUCT
{
    int fsoy_stride;
    int fsoc_stride;
    int weo_stride;
    int dswo_stride;
}ISP_TPIPE_CONFIG_MSF_WDMA_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSF_UNP_STRUCT
{
    int baseiy_yuv_bit;
    int baseiy_yuv_dng;
    int baseic_yuv_bit;
    int baseic_yuv_dng;
    int refiy_yuv_bit;
    int refiy_yuv_dng;
    int refic_yuv_bit;
    int refic_yuv_dng;
    int dsiy_yuv_bit;
    int dsiy_yuv_dng;
    int dsic_yuv_bit;
    int dsic_yuv_dng;
    int fsoy_yuv_bit;
    int fsoy_yuv_dng;
    int fsoc_yuv_bit;
    int fsoc_yuv_dng;
}ISP_TPIPE_CONFIG_MSF_UNP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSF_PAK_STRUCT
{
    int fsoy_yuv_bit;
    int fsoy_yuv_dng;
    int fsoc_yuv_bit;
    int fsoc_yuv_dng;
}ISP_TPIPE_CONFIG_MSF_PAK_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT1_STRUCT
{
    int smt1o_sel;
}ISP_TPIPE_CONFIG_SMT1_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT2_STRUCT
{
    int smt2o_sel;
}ISP_TPIPE_CONFIG_SMT2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT3_STRUCT
{
    int smt3o_sel;
}ISP_TPIPE_CONFIG_SMT3_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT4_STRUCT
{
    int smt4o_sel;
}ISP_TPIPE_CONFIG_SMT4_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT5_STRUCT
{
    int smt5o_sel;
}ISP_TPIPE_CONFIG_SMT5_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMT6_STRUCT
{
    int smt6o_sel;
}ISP_TPIPE_CONFIG_SMT6_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSS_UNP_STRUCT
{
    int mssiy_yuv_bit;
    int mssiy_yuv_dng;
    int mssic_yuv_bit;
    int mssic_yuv_dng;
}ISP_TPIPE_CONFIG_MSS_UNP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSS_DRZ_STRUCT
{
    int ydrz_input_width;
    int ydrz_input_height;
    int ydrz_output_width;
    int ydrz_output_height;
}ISP_TPIPE_CONFIG_MSS_DRZ_STRUCT;

typedef enum TPIPE_Pass2CmdqNum_ENUM
{
    TPIPE_PASS2_CMDQ_NONE=0,
    TPIPE_PASS2_CMDQ_1,
    TPIPE_PASS2_CMDQ_2,
    TPIPE_PASS2_CMDQ_3,
    TPIPE_PASS2_CMDQ_NUM
}TPIPE_Pass2CmdqNum_ENUM;

typedef enum TPIPE_Pass2CmdqPrior_ENUM
{
    TPIPE_PASS2_CMDQ_PRIOR_LOW=1,
    TPIPE_PASS2_CMDQ_PRIOR_HIGH = 10
}TPIPE_Pass2CmdqPrior_ENUM;

typedef struct ISP_TPIPE_CONFIG_PASS2_STRUCT
{
    E_ISP_DIP_CQ Pass2CmdqNum;
    //TPIPE_Pass2CmdqPrior_ENUM Pass2CmdqPriority;
}ISP_TPIPE_CONFIG_PASS2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_STRUCT
{
    ISP_TPIPE_CONFIG_TOP_STRUCT top;
    ISP_TPIPE_CONFIG_SW_STRUCT sw;
    ISP_TPIPE_CONFIG_IMGI_STRUCT imgi;
    ISP_TPIPE_CONFIG_IMGBI_STRUCT imgbi;
    ISP_TPIPE_CONFIG_IMGCI_STRUCT imgci;
    ISP_TPIPE_CONFIG_VIPI_STRUCT vipi;
    ISP_TPIPE_CONFIG_VIPBI_STRUCT vipbi;
    ISP_TPIPE_CONFIG_VIPCI_STRUCT vipci;
    ISP_TPIPE_CONFIG_UFDI_STRUCT ufdi;
    ISP_TPIPE_CONFIG_LCEI_STRUCT lcei;
    ISP_TPIPE_CONFIG_DMGI_STRUCT dmgi;
    ISP_TPIPE_CONFIG_DEPI_STRUCT depi;
    ISP_TPIPE_CONFIG_TIMGO_STRUCT timgo;
    ISP_TPIPE_CONFIG_DCESO_STRUCT dceso;
    ISP_TPIPE_CONFIG_IMG3O_STRUCT img3o;
    ISP_TPIPE_CONFIG_IMG3BO_STRUCT img3bo;
    ISP_TPIPE_CONFIG_IMG3CO_STRUCT img3co;
    ISP_TPIPE_CONFIG_CRZO_STRUCT crzo;
    ISP_TPIPE_CONFIG_CRZBO_STRUCT crzbo;
    ISP_TPIPE_CONFIG_FEO_STRUCT feo;
    ISP_TPIPE_CONFIG_UFD_STRUCT ufd;
    ISP_TPIPE_CONFIG_YUFD_STRUCT yufd;
    ISP_TPIPE_CONFIG_LSC_STRUCT lsc;
    ISP_TPIPE_CONFIG_LTM_STRUCT ltm;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp2;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp3;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp4;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp5;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp6;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp7;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp8;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp9;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp10;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp11;
    ISP_TPIPE_CONFIG_UNP_STRUCT unp16;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak2;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak3;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak4;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak5;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak6;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak7;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak8;
    ISP_TPIPE_CONFIG_PAK_STRUCT pak16;
    ISP_TPIPE_CONFIG_DM_STRUCT dm;
    ISP_TPIPE_CONFIG_G2CX_STRUCT g2cx;
    ISP_TPIPE_CONFIG_YNR_STRUCT ynr;
    ISP_TPIPE_CONFIG_CNR_STRUCT cnr;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk1;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk2;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk3;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk4;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk5;
    ISP_TPIPE_CONFIG_SLK_STRUCT slk6;
    ISP_TPIPE_CONFIG_NDG_STRUCT ndg;
    ISP_TPIPE_CONFIG_NDG2_STRUCT ndg2;
    ISP_TPIPE_CONFIG_EE_STRUCT ee;
    ISP_TPIPE_CONFIG_LCE_STRUCT lce;
    ISP_TPIPE_CONFIG_DCES_STRUCT dces;
    ISP_TPIPE_CONFIG_CRP_STRUCT crp1;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz1;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz3;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz4;
    ISP_TPIPE_CONFIG_CRZ_STRUCT crz;
    ISP_TPIPE_CONFIG_DFE_STRUCT dfe;
    ISP_TPIPE_CONFIG_NR3D_STRUCT nr3d;
    ISP_TPIPE_CONFIG_CRSP_STRUCT crsp;
    ISP_TPIPE_CONFIG_SMT1_STRUCT smt1;
    ISP_TPIPE_CONFIG_SMT2_STRUCT smt2;
    ISP_TPIPE_CONFIG_SMT3_STRUCT smt3;
    ISP_TPIPE_CONFIG_SMT4_STRUCT smt4;
    ISP_TPIPE_CONFIG_SMT5_STRUCT smt5;
    ISP_TPIPE_CONFIG_SMT6_STRUCT smt6;
    ISP_TPIPE_CONFIG_SMT1I_STRUCT smt1i;
    ISP_TPIPE_CONFIG_SMT1O_STRUCT smt1o;
    ISP_TPIPE_CONFIG_SMT2I_STRUCT smt2i;
    ISP_TPIPE_CONFIG_SMT2O_STRUCT smt2o;
    ISP_TPIPE_CONFIG_SMT3I_STRUCT smt3i;
    ISP_TPIPE_CONFIG_SMT3O_STRUCT smt3o;
    ISP_TPIPE_CONFIG_SMT4I_STRUCT smt4i;
    ISP_TPIPE_CONFIG_SMT4O_STRUCT smt4o;
    ISP_TPIPE_CONFIG_SMT5I_STRUCT smt5i;
    ISP_TPIPE_CONFIG_SMT5O_STRUCT smt5o;
    ISP_TPIPE_CONFIG_SMT6I_STRUCT smt6i;
    ISP_TPIPE_CONFIG_SMT6O_STRUCT smt6o;
    ISP_TPIPE_CONFIG_MSS_STRUCT mss;
    ISP_TPIPE_CONFIG_MSS_RDMA_STRUCT mss_rdma;
    ISP_TPIPE_CONFIG_MSS_WDMA_STRUCT mss_wdma;
    ISP_TPIPE_CONFIG_MSS_UNP_STRUCT mss_unp;
    ISP_TPIPE_CONFIG_MSS_DRZ_STRUCT mss_drz;
    ISP_TPIPE_CONFIG_MSS_PAK_STRUCT mss_pak;
    ISP_TPIPE_CONFIG_CRSP_STRUCT mss_crsp;
    ISP_TPIPE_CONFIG_MSF_STRUCT msf;
    ISP_TPIPE_CONFIG_MSF_RDMA_STRUCT msf_rdma;
    ISP_TPIPE_CONFIG_MSF_WDMA_STRUCT msf_wdma;
    ISP_TPIPE_CONFIG_MSF_UNP_STRUCT msf_unp;
    ISP_TPIPE_CONFIG_MSF_PAK_STRUCT msf_pak;
    ISP_TPIPE_CONFIG_SLK_STRUCT msf_slk;
    ISP_TPIPE_CONFIG_MSF_YURZ_STRUCT msf_yurz_basei;
    ISP_TPIPE_CONFIG_MSF_CURZ_STRUCT msf_curz_basei;
    ISP_TPIPE_CONFIG_MSF_YURZ_STRUCT msf_yurz_refi;
    ISP_TPIPE_CONFIG_MSF_CURZ_STRUCT msf_curz_refi;
    ISP_TPIPE_CONFIG_MSF_YURZ_STRUCT msf_yurz_dsi;
    ISP_TPIPE_CONFIG_MSF_CURZ_STRUCT msf_curz_dsi;
    ISP_TPIPE_CONFIG_MSF_YURZ_STRUCT msf_yurz_idi;
    ISP_TPIPE_CONFIG_MSF_CURZ_STRUCT msf_curz_idi;
    ISP_TPIPE_CONFIG_MSF_YURZ_STRUCT msf_yurz_dswi;
    ISP_TPIPE_CONFIG_MSF_YURZ_STRUCT msf_yurz_confi;
    ISP_TPIPE_CONFIG_CRSP_STRUCT msf_crsp;
    WPE_TPIPE_CONFIG_STRUCT wpe;
    ISP_TPIPE_CONFIG_PASS2_STRUCT pass2;
    ISP_DRIVER_CONFIG_STRUCT drvinfo;
}ISP_TPIPE_CONFIG_STRUCT;

/* struct size must be x4 bytes */
typedef struct ISP_TPIPE_INFORMATION_STRUCT
{
    unsigned int num;/* tpipe cal num */
    unsigned int tdr_disable_flag;/* tdr disable flag */
    unsigned int pos_xs;/* tpipe start */
    unsigned int pos_xe;/* tpipe end */
    unsigned int pos_ys;/* tpipe start */
    unsigned int pos_ye;/* tpipe end */
    unsigned int tpipe_stop_flag;/* stop flag */
    unsigned int dump_offset_no;/* word offset */
}ISP_TPIPE_INFORMATION_STRUCT;

typedef struct ISP_TPIPE_DESCRIPTOR_STRUCT
{
    unsigned int tpipe_sel_mode;
    unsigned int tpipe_dual_mode;
    unsigned int used_word_no;
    unsigned int total_word_no;
    unsigned int config_no_per_tpipe;
    unsigned int used_tpipe_no;
    unsigned int total_tpipe_no;
    unsigned int horizontal_tpipe_no;
    unsigned int curr_horizontal_tpipe_no;
    unsigned int curr_vertical_tpipe_no;
    unsigned int tpipe_sel;
    unsigned int *tdr_disable_flag;
    unsigned int *last_irq_flag;
    unsigned int *tpipe_config;
    unsigned int used_word_no_d;
    unsigned int used_tpipe_no_d;
    unsigned int tpipe_sel_d;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info;
    unsigned int *tpipe_config_d;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_d;
    /* wpe */
    unsigned int config_no_per_tpipe_wpe;
    unsigned int tpipe_sel_wpe;
    unsigned int *tpipe_config_wpe;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_wpe;
    unsigned int used_word_no_wpe;
    unsigned int total_word_no_wpe;
    /* wpe_d */
    unsigned int tpipe_sel_wpe_d;
    unsigned int *tpipe_config_d_wpe;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_d_wpe;
    unsigned int used_word_no_d_wpe;
    /* wpe_s */
    unsigned int used_tpipe_no_wpe_s;
    unsigned int config_no_per_tpipe_wpe_s;
    unsigned int *tpipe_config_wpe_s;
    unsigned int used_word_no_wpe_s;
    unsigned int total_word_no_wpe_s;
    /* wpe_s_d */
    unsigned int used_tpipe_no_wpe_s_d;
    unsigned int config_no_per_tpipe_wpe_s_d;
    unsigned int *tpipe_config_wpe_s_d;
    unsigned int used_word_no_wpe_s_d;
    /* mfb */
    unsigned int config_no_per_tpipe_mfb;
    unsigned int *tpipe_config_mfb;
    unsigned int tpipe_sel_mfb;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_mfb;
    unsigned int total_word_no_mfb;
    unsigned int used_word_no_mfb;
    /* mss */
    unsigned int config_no_per_tpipe_mss;
    unsigned int *tpipe_config_mss;
    unsigned int tpipe_sel_mss;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_mss;
    unsigned int total_word_no_mss;
    unsigned int used_word_no_mss;
}ISP_TPIPE_DESCRIPTOR_STRUCT;

extern int tpipe_main_query_platform_working_buffer_size(int tpipe_no, int tpipe_sel);
extern ISP_TPIPE_MESSAGE_ENUM tpipe_main_platform(const ISP_TPIPE_CONFIG_STRUCT *ptr_tpipe_config,
                ISP_TPIPE_DESCRIPTOR_STRUCT *ptr_isp_tpipe_descriptor,
                char *ptr_working_buffer, int buffer_size, void *ptr_dip_reg, void *ptr_mfb_reg, void *ptr_mss_reg);
extern ISP_TPIPE_MESSAGE_ENUM tpipe_print_platform_config(const ISP_TPIPE_CONFIG_STRUCT *ptr_tpipe_config);
#endif
